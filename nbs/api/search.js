window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "rush.doc", "modulename": "rush.doc", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "rush.doc.fns", "modulename": "rush.doc", "qualname": "fns", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;gmx&#x27;: &lt;function BaseProvider.get_module_functions.&lt;locals&gt;.closure.&lt;locals&gt;.runner&gt;, &#x27;prepare_protein&#x27;: &lt;function BaseProvider.get_module_functions.&lt;locals&gt;.closure.&lt;locals&gt;.runner&gt;, &#x27;pdb2pqr&#x27;: &lt;function BaseProvider.get_module_functions.&lt;locals&gt;.closure.&lt;locals&gt;.runner&gt;, &#x27;cairo&#x27;: &lt;function BaseProvider.get_module_functions.&lt;locals&gt;.closure.&lt;locals&gt;.runner&gt;, &#x27;pbsa&#x27;: &lt;function BaseProvider.get_module_functions.&lt;locals&gt;.closure.&lt;locals&gt;.runner&gt;, &#x27;qp_gen_inputs&#x27;: &lt;function BaseProvider.get_module_functions.&lt;locals&gt;.closure.&lt;locals&gt;.runner&gt;, &#x27;qp_collate&#x27;: &lt;function BaseProvider.get_module_functions.&lt;locals&gt;.closure.&lt;locals&gt;.runner&gt;, &#x27;pick_conformer&#x27;: &lt;function BaseProvider.get_module_functions.&lt;locals&gt;.closure.&lt;locals&gt;.runner&gt;, &#x27;pdbfixer&#x27;: &lt;function BaseProvider.get_module_functions.&lt;locals&gt;.closure.&lt;locals&gt;.runner&gt;, &#x27;hermes_lattice&#x27;: &lt;function BaseProvider.get_module_functions.&lt;locals&gt;.closure.&lt;locals&gt;.runner&gt;, &#x27;hermes_energy&#x27;: &lt;function BaseProvider.get_module_functions.&lt;locals&gt;.closure.&lt;locals&gt;.runner&gt;, &#x27;hermes_binding&#x27;: &lt;function BaseProvider.get_module_functions.&lt;locals&gt;.closure.&lt;locals&gt;.runner&gt;, &#x27;fragment_aa&#x27;: &lt;function BaseProvider.get_module_functions.&lt;locals&gt;.closure.&lt;locals&gt;.runner&gt;, &#x27;fragment&#x27;: &lt;function BaseProvider.get_module_functions.&lt;locals&gt;.closure.&lt;locals&gt;.runner&gt;, &#x27;convert&#x27;: &lt;function BaseProvider.get_module_functions.&lt;locals&gt;.closure.&lt;locals&gt;.runner&gt;, &#x27;concat&#x27;: &lt;function BaseProvider.get_module_functions.&lt;locals&gt;.closure.&lt;locals&gt;.runner&gt;, &#x27;auto3d&#x27;: &lt;function BaseProvider.get_module_functions.&lt;locals&gt;.closure.&lt;locals&gt;.runner&gt;, &#x27;dubai&#x27;: &lt;function BaseProvider.get_module_functions.&lt;locals&gt;.closure.&lt;locals&gt;.runner&gt;, &#x27;gmx_mmpbsa&#x27;: &lt;function BaseProvider.get_module_functions.&lt;locals&gt;.closure.&lt;locals&gt;.runner&gt;, &#x27;gmx_frame_select_pdb&#x27;: &lt;function BaseProvider.get_module_functions.&lt;locals&gt;.closure.&lt;locals&gt;.runner&gt;, &#x27;gmx_frame_select&#x27;: &lt;function BaseProvider.get_module_functions.&lt;locals&gt;.closure.&lt;locals&gt;.runner&gt;, &#x27;rxdock&#x27;: &lt;function BaseProvider.get_module_functions.&lt;locals&gt;.closure.&lt;locals&gt;.runner&gt;, &#x27;prepare_ligand&#x27;: &lt;function BaseProvider.get_module_functions.&lt;locals&gt;.closure.&lt;locals&gt;.runner&gt;, &#x27;plip&#x27;: &lt;function BaseProvider.get_module_functions.&lt;locals&gt;.closure.&lt;locals&gt;.runner&gt;, &#x27;gmx_pdb&#x27;: &lt;function BaseProvider.get_module_functions.&lt;locals&gt;.closure.&lt;locals&gt;.runner&gt;, &#x27;gnina_pdb&#x27;: &lt;function BaseProvider.get_module_functions.&lt;locals&gt;.closure.&lt;locals&gt;.runner&gt;, &#x27;gmx_em&#x27;: &lt;function BaseProvider.get_module_functions.&lt;locals&gt;.closure.&lt;locals&gt;.runner&gt;, &#x27;proton&#x27;: &lt;function BaseProvider.get_module_functions.&lt;locals&gt;.closure.&lt;locals&gt;.runner&gt;, &#x27;conquest&#x27;: &lt;function BaseProvider.get_module_functions.&lt;locals&gt;.closure.&lt;locals&gt;.runner&gt;, &#x27;hermes_setonix&#x27;: &lt;function BaseProvider.get_module_functions.&lt;locals&gt;.closure.&lt;locals&gt;.runner&gt;, &#x27;echo&#x27;: &lt;function BaseProvider.get_module_functions.&lt;locals&gt;.closure.&lt;locals&gt;.runner&gt;, &#x27;spam&#x27;: &lt;function BaseProvider.get_module_functions.&lt;locals&gt;.closure.&lt;locals&gt;.runner&gt;, &#x27;delay&#x27;: &lt;function BaseProvider.get_module_functions.&lt;locals&gt;.closure.&lt;locals&gt;.runner&gt;, &#x27;gypsum_dl&#x27;: &lt;function BaseProvider.get_module_functions.&lt;locals&gt;.closure.&lt;locals&gt;.runner&gt;, &#x27;gnina&#x27;: &lt;function BaseProvider.get_module_functions.&lt;locals&gt;.closure.&lt;locals&gt;.runner&gt;}"}, {"fullname": "rush.doc.RushProvider", "modulename": "rush.doc", "qualname": "RushProvider", "kind": "class", "doc": "<p>A class representing a provider for the Rush quantum chemistry workflow platform.</p>\n", "bases": "rush.provider.Provider"}, {"fullname": "rush.doc.RushProvider.__init__", "modulename": "rush.doc", "qualname": "RushProvider.__init__", "kind": "function", "doc": "<p>Initialize the RushProvider with a graphql client.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>access_token</strong>:  The access token to use.</li>\n<li><strong>url</strong>:  The url to use.</li>\n<li><strong>workspace</strong>:  The workspace directory to use.</li>\n<li><strong>batch_tags</strong>:  The tags that will be placed on all runs by default.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">workspace</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/home/machineer/repos/qdx/rush-py&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">batch_tags</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">logger</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "rush.doc.RushProvider.Arg", "modulename": "rush.doc", "qualname": "RushProvider.Arg", "kind": "class", "doc": "<p>Abstract base class for generic types.</p>\n\n<p>A generic type is typically declared by inheriting from\nthis class parameterized with one or more type variables.\nFor example, a generic mapping type might be defined as::</p>\n\n<p>class Mapping(Generic[KT, VT]):\n      def __getitem__(self, key: KT) -> VT:\n          ...\n      # Etc.</p>\n\n<p>This class can then be used as follows::</p>\n\n<p>def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:\n      try:\n          return mapping[key]\n      except KeyError:\n          return default</p>\n", "bases": "typing.Generic[~T]"}, {"fullname": "rush.doc.RushProvider.history", "modulename": "rush.doc", "qualname": "RushProvider.history", "kind": "variable", "doc": "<p></p>\n", "default_value": "History(tags=[], instances=[])"}, {"fullname": "rush.doc.RushProvider.client", "modulename": "rush.doc", "qualname": "RushProvider.client", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;rush.graphql_client.client.Client object&gt;"}, {"fullname": "rush.doc.RushProvider.module_paths", "modulename": "rush.doc", "qualname": "RushProvider.module_paths", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, str]", "default_value": "{&#x27;gmx&#x27;: &#x27;github:talo/gmx_tengu_support/cb9c066a1fd43aa1e3982643eaaf8be21ec0a502#gmx_tengu&#x27;, &#x27;prepare_protein&#x27;: &#x27;github:talo/prepare_protein/83bed2ad1f01f495c94518717f9f5b1bd7fe855c#prepare_protein_tengu&#x27;, &#x27;pdb2pqr&#x27;: &#x27;github:talo/prepare_protein/83bed2ad1f01f495c94518717f9f5b1bd7fe855c#pdb2pqr_tengu&#x27;, &#x27;cairo&#x27;: &#x27;github:talo/cairo/665b83a4ed8ff5e811fcbd9e55ddf8f21e820aeb#cairo_tengu&#x27;, &#x27;pbsa&#x27;: &#x27;github:talo/pbsa-cuda/399ed826b15af36391e7ab9cea93b5e551e784bf#pbsa_tengu&#x27;, &#x27;qp_gen_inputs&#x27;: &#x27;github:talo/tengu-prelude/efc6d8b3a8cc342cd9866d037abb77dac40a4d56#qp_gen_inputs&#x27;, &#x27;qp_collate&#x27;: &#x27;github:talo/tengu-prelude/efc6d8b3a8cc342cd9866d037abb77dac40a4d56#qp_collate&#x27;, &#x27;pick_conformer&#x27;: &#x27;github:talo/tengu-prelude/efc6d8b3a8cc342cd9866d037abb77dac40a4d56#pick_conformer&#x27;, &#x27;pdbfixer&#x27;: &#x27;github:talo/tengu-prelude/efc6d8b3a8cc342cd9866d037abb77dac40a4d56#pdbfixer&#x27;, &#x27;hermes_lattice&#x27;: &#x27;github:talo/tengu-prelude/efc6d8b3a8cc342cd9866d037abb77dac40a4d56#hermes_lattice&#x27;, &#x27;hermes_energy&#x27;: &#x27;github:talo/tengu-prelude/efc6d8b3a8cc342cd9866d037abb77dac40a4d56#hermes_energy&#x27;, &#x27;hermes_binding&#x27;: &#x27;github:talo/tengu-prelude/efc6d8b3a8cc342cd9866d037abb77dac40a4d56#hermes_binding&#x27;, &#x27;fragment_aa&#x27;: &#x27;github:talo/tengu-prelude/efc6d8b3a8cc342cd9866d037abb77dac40a4d56#fragment_aa&#x27;, &#x27;fragment&#x27;: &#x27;github:talo/tengu-prelude/efc6d8b3a8cc342cd9866d037abb77dac40a4d56#fragment&#x27;, &#x27;convert&#x27;: &#x27;github:talo/tengu-prelude/efc6d8b3a8cc342cd9866d037abb77dac40a4d56#convert&#x27;, &#x27;concat&#x27;: &#x27;github:talo/tengu-prelude/efc6d8b3a8cc342cd9866d037abb77dac40a4d56#concat&#x27;, &#x27;auto3d&#x27;: &#x27;github:talo/tengu-auto3d/f5f26308f74bde570c870ff0b5bb1be42ac9c712#auto3d_tengu&#x27;, &#x27;dubai&#x27;: &#x27;github:talo/Dubai/d013073e0774326e903e6abaca4c1871d4950e70#dubai_tengu&#x27;, &#x27;gmx_mmpbsa&#x27;: &#x27;github:talo/gmx_tengu_support/6bd881c6bb32ac85ab9cb9c95d2b16676cc72b7a#gmx_mmpbsa_tengu&#x27;, &#x27;gmx_frame_select_pdb&#x27;: &#x27;github:talo/gmx_tengu_support/6bd881c6bb32ac85ab9cb9c95d2b16676cc72b7a#gmx_frame_select_pdb&#x27;, &#x27;gmx_frame_select&#x27;: &#x27;github:talo/gmx_tengu_support/6bd881c6bb32ac85ab9cb9c95d2b16676cc72b7a#gmx_frame_select&#x27;, &#x27;rxdock&#x27;: &#x27;github:talo/tengu-rxdock/5e2e5b18995f3730e5f77cd4c90b593e862ca974#rxdock_tengu&#x27;, &#x27;prepare_ligand&#x27;: &#x27;github:talo/gypsum_dl/04acd1852cb3e2c8d0347e15763926fdf9a93a5d#prepare_ligand_tengu&#x27;, &#x27;plip&#x27;: &#x27;github:talo/tengu-plip/9a4ff5b9e5fe77f37505c4718d0d63182885c805#plip_tengu&#x27;, &#x27;gmx_pdb&#x27;: &#x27;github:talo/gmx_tengu_support/5630231b47abff0bdd767241a9c8ef60e6192d8e#gmx_tengu_pdb&#x27;, &#x27;gnina_pdb&#x27;: &#x27;github:talo/tengu-gnina/6f97cbd5df44535f439a9f94bb3af3d5d72c933c#gnina_tengu_pdb&#x27;, &#x27;gmx_em&#x27;: &#x27;github:talo/gmx_tengu_support/1c8beb04620306f99157bf700964dd2c476578a7#gmx_em&#x27;, &#x27;proton&#x27;: &#x27;github:talo/proton/3a8c2dfa04787b9b8a0e81dc0188a85f43b80c86#proton_tengu&#x27;, &#x27;conquest&#x27;: &#x27;github:talo/CONQUEST-tengu/c668c2c9f364835237f9052ab4721c29a2e0d7ac#conquest_tengu&#x27;, &#x27;hermes_setonix&#x27;: &#x27;github:talo/tengu-prelude/7bc3f5ba41d4f4a20baf44eebb22a9f31cea7b41#hermes_setonix&#x27;, &#x27;echo&#x27;: &#x27;github:talo/tengu-module-example/b334a851530033b79762c3341bf584f8939feee1#tengu_echo&#x27;, &#x27;spam&#x27;: &#x27;github:talo/tengu-module-example/b334a851530033b79762c3341bf584f8939feee1#spam&#x27;, &#x27;delay&#x27;: &#x27;github:talo/tengu-module-example/b334a851530033b79762c3341bf584f8939feee1#delay&#x27;, &#x27;gypsum_dl&#x27;: &#x27;github:talo/gypsum_dl/97f5d845dd68ebe9ccc7d44bb9cc9647f4856f1a#gypsum_dl_tengu&#x27;, &#x27;gnina&#x27;: &#x27;github:talo/gnina/2f8afc6591416c3ac986bc87ee424f9d21548590#gnina_tengu&#x27;}"}, {"fullname": "rush.doc.RushProvider.batch_tags", "modulename": "rush.doc", "qualname": "RushProvider.batch_tags", "kind": "variable", "doc": "<p></p>\n", "default_value": "[]"}, {"fullname": "rush.doc.RushProvider.nuke", "modulename": "rush.doc", "qualname": "RushProvider.nuke", "kind": "function", "doc": "<p>Delete the workspace, and optionally the data stored for it on the server.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">remote</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.restore", "modulename": "rush.doc", "qualname": "RushProvider.restore", "kind": "function", "doc": "<p>Restore the workspace.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">workspace</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rush.doc.RushProvider.save", "modulename": "rush.doc", "qualname": "RushProvider.save", "kind": "function", "doc": "<p>Save the workspace.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">history_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rush.doc.RushProvider.status", "modulename": "rush.doc", "qualname": "RushProvider.status", "kind": "function", "doc": "<p>Get the status of all module instances in a workspace, grouped by tag, path, or id.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">instance_ids</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">uuid</span><span class=\"o\">.</span><span class=\"n\">UUID</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">workspace</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">history_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">group_by</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;tag&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;path&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;id&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;id&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceStatus</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.argument", "modulename": "rush.doc", "qualname": "RushProvider.argument", "kind": "function", "doc": "<p>Retrieve an argument from the database.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>id</strong>:  The ID of the argument.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The argument.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"n\">uuid</span><span class=\"o\">.</span><span class=\"n\">UUID</span></span><span class=\"return-annotation\">) -> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">argument</span><span class=\"o\">.</span><span class=\"n\">ArgumentArgument</span>:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.arguments", "modulename": "rush.doc", "qualname": "RushProvider.arguments", "kind": "function", "doc": "<p>Retrieve a list of arguments.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">after</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">before</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">first</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">last</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">AsyncIterable</span><span class=\"p\">[</span><span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">provider</span><span class=\"o\">.</span><span class=\"n\">Page</span><span class=\"p\">[</span><span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">arguments</span><span class=\"o\">.</span><span class=\"n\">ArgumentsMeAccountArguments</span><span class=\"p\">,</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">arguments</span><span class=\"o\">.</span><span class=\"n\">ArgumentsMeAccountArgumentsPageInfo</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.object", "modulename": "rush.doc", "qualname": "RushProvider.object", "kind": "function", "doc": "<p>Retrieve an object from the database.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>id</strong>:  The ID of the object.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"n\">uuid</span><span class=\"o\">.</span><span class=\"n\">UUID</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.download_object", "modulename": "rush.doc", "qualname": "RushProvider.download_object", "kind": "function", "doc": "<p>Retrieve an object from the store: a wrapper for object with simpler behavior.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>id</strong>:  The ID of the object.</li>\n<li><strong>filepath</strong>:  Where to download the object.</li>\n<li><strong>filename</strong>:  Download to the workspace with this name under \"objects\".</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"n\">uuid</span><span class=\"o\">.</span><span class=\"n\">UUID</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">overwrite</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.load_module_paths", "modulename": "rush.doc", "qualname": "RushProvider.load_module_paths", "kind": "function", "doc": "<p>Load all of the module versions from a file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong>:  Json module version file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "rush.doc.RushProvider.save_module_paths", "modulename": "rush.doc", "qualname": "RushProvider.save_module_paths", "kind": "function", "doc": "<p>Lock all of the module versions to a file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>modules</strong>:  The modules to lock.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">modules</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "rush.doc.RushProvider.run", "modulename": "rush.doc", "qualname": "RushProvider.run", "kind": "function", "doc": "<p>Run a module with the given inputs and outputs.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path</strong>:  The path of the module.</li>\n<li><strong>args</strong>:  The arguments to the module.</li>\n<li><strong>target</strong>:  The target to run the module on.</li>\n<li><strong>resources</strong>:  The resources to run the module with.</li>\n<li><strong>tags</strong>:  The tags to apply to the module.</li>\n<li><strong>out_tags</strong>:  The tags to apply to the outputs of the module.\nIf provided, must be the same length as the number of outputs.</li>\n<li><strong>restore</strong>:  Check if a module instance with the same tags and path already exists.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">provider</span><span class=\"o\">.</span><span class=\"n\">BaseProvider</span><span class=\"o\">.</span><span class=\"n\">Arg</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">argument</span><span class=\"o\">.</span><span class=\"n\">Argument</span><span class=\"p\">,</span> <span class=\"n\">uuid</span><span class=\"o\">.</span><span class=\"n\">UUID</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">,</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">IOBase</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceTarget</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">input_types</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceResourcesInput</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">out_tags</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">restore</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"o\">.</span><span class=\"n\">RunRun</span> <span class=\"o\">|</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">module_instance_full</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceFullModuleInstance</span>:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.module_instances", "modulename": "rush.doc", "qualname": "RushProvider.module_instances", "kind": "function", "doc": "<p>Retrieve a list of module instancees filtered by the given parameters.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>first</strong>:  Retrieve the first N module instances.</li>\n<li><strong>after</strong>:  Retrieve module instances after a certain cursor.</li>\n<li><strong>last</strong>:  Retrieve the last N module instances.</li>\n<li><strong>before</strong>:  Retrieve module instances before a certain cursor.</li>\n<li><strong>path</strong>:  Retrieve module instancees with for the given module path.</li>\n<li><strong>name</strong>:  Retrieve module instancees with for the given module name.</li>\n<li><strong>status</strong>:  Retrieve module instancees with the specified status (\"CREATED\", \"ADMITTED\", \"QUEUED\", \"DISPATCHED\", \"COMPLETED\", \"FAILED\").</li>\n<li><strong>tags</strong>:  Retrieve module instancees with the given list of tags.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of filtered module instancee.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">first</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">base_model</span><span class=\"o\">.</span><span class=\"n\">UnsetType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">base_model</span><span class=\"o\">.</span><span class=\"n\">UnsetType</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">after</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">base_model</span><span class=\"o\">.</span><span class=\"n\">UnsetType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">base_model</span><span class=\"o\">.</span><span class=\"n\">UnsetType</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">last</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">base_model</span><span class=\"o\">.</span><span class=\"n\">UnsetType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">base_model</span><span class=\"o\">.</span><span class=\"n\">UnsetType</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">before</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">base_model</span><span class=\"o\">.</span><span class=\"n\">UnsetType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">base_model</span><span class=\"o\">.</span><span class=\"n\">UnsetType</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">base_model</span><span class=\"o\">.</span><span class=\"n\">UnsetType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">base_model</span><span class=\"o\">.</span><span class=\"n\">UnsetType</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">base_model</span><span class=\"o\">.</span><span class=\"n\">UnsetType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">base_model</span><span class=\"o\">.</span><span class=\"n\">UnsetType</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">status</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceStatus</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">base_model</span><span class=\"o\">.</span><span class=\"n\">UnsetType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">base_model</span><span class=\"o\">.</span><span class=\"n\">UnsetType</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">base_model</span><span class=\"o\">.</span><span class=\"n\">UnsetType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">base_model</span><span class=\"o\">.</span><span class=\"n\">UnsetType</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">ids</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">uuid</span><span class=\"o\">.</span><span class=\"n\">UUID</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">base_model</span><span class=\"o\">.</span><span class=\"n\">UnsetType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">base_model</span><span class=\"o\">.</span><span class=\"n\">UnsetType</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">AsyncIterable</span><span class=\"p\">[</span><span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">provider</span><span class=\"o\">.</span><span class=\"n\">Page</span><span class=\"p\">[</span><span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">module_instance_full</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceFullModuleInstance</span><span class=\"p\">,</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">module_instances</span><span class=\"o\">.</span><span class=\"n\">ModuleInstancesMeAccountModuleInstancesPageInfo</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.modules", "modulename": "rush.doc", "qualname": "RushProvider.modules", "kind": "function", "doc": "<p>Get all modules.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>first</strong>:  Retrieve the first N modules.</li>\n<li><strong>after</strong>:  Retrieve modules after a certain cursor.</li>\n<li><strong>last</strong>:  Retrieve the last N modules.</li>\n<li><strong>before</strong>:  Retrieve modules before a certain cursor.</li>\n<li><strong>path</strong>:  Retrieve modules with for the given module path.</li>\n<li><strong>name</strong>:  Retrieve modules with for the given module name.</li>\n<li><strong>tags</strong>:  Retrieve modules with the given list of tags.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">first</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">base_model</span><span class=\"o\">.</span><span class=\"n\">UnsetType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">base_model</span><span class=\"o\">.</span><span class=\"n\">UnsetType</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">after</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">base_model</span><span class=\"o\">.</span><span class=\"n\">UnsetType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">base_model</span><span class=\"o\">.</span><span class=\"n\">UnsetType</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">last</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">base_model</span><span class=\"o\">.</span><span class=\"n\">UnsetType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">base_model</span><span class=\"o\">.</span><span class=\"n\">UnsetType</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">before</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">base_model</span><span class=\"o\">.</span><span class=\"n\">UnsetType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">base_model</span><span class=\"o\">.</span><span class=\"n\">UnsetType</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">base_model</span><span class=\"o\">.</span><span class=\"n\">UnsetType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">base_model</span><span class=\"o\">.</span><span class=\"n\">UnsetType</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">base_model</span><span class=\"o\">.</span><span class=\"n\">UnsetType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">base_model</span><span class=\"o\">.</span><span class=\"n\">UnsetType</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">AsyncIterable</span><span class=\"p\">[</span><span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">provider</span><span class=\"o\">.</span><span class=\"n\">Page</span><span class=\"p\">[</span><span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">fragments</span><span class=\"o\">.</span><span class=\"n\">ModuleFull</span><span class=\"p\">,</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">ModulesModulesPageInfo</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.latest_modules", "modulename": "rush.doc", "qualname": "RushProvider.latest_modules", "kind": "function", "doc": "<p>Get latest modules.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">first</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">base_model</span><span class=\"o\">.</span><span class=\"n\">UnsetType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">base_model</span><span class=\"o\">.</span><span class=\"n\">UnsetType</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">after</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">base_model</span><span class=\"o\">.</span><span class=\"n\">UnsetType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">base_model</span><span class=\"o\">.</span><span class=\"n\">UnsetType</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">last</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">base_model</span><span class=\"o\">.</span><span class=\"n\">UnsetType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">base_model</span><span class=\"o\">.</span><span class=\"n\">UnsetType</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">before</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">base_model</span><span class=\"o\">.</span><span class=\"n\">UnsetType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">base_model</span><span class=\"o\">.</span><span class=\"n\">UnsetType</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">names</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">base_model</span><span class=\"o\">.</span><span class=\"n\">UnsetType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">base_model</span><span class=\"o\">.</span><span class=\"n\">UnsetType</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">AsyncIterable</span><span class=\"p\">[</span><span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">provider</span><span class=\"o\">.</span><span class=\"n\">Page</span><span class=\"p\">[</span><span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">fragments</span><span class=\"o\">.</span><span class=\"n\">ModuleFull</span><span class=\"p\">,</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">latest_modules</span><span class=\"o\">.</span><span class=\"n\">LatestModulesLatestModulesPageInfo</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.get_latest_module_paths", "modulename": "rush.doc", "qualname": "RushProvider.get_latest_module_paths", "kind": "function", "doc": "<p>Get the latest module paths for a list of modules.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>names</strong>:  The names of the modules.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">names</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.get_modules_for_paths", "modulename": "rush.doc", "qualname": "RushProvider.get_modules_for_paths", "kind": "function", "doc": "<p>Get modules for the provided paths.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">paths</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">AsyncIterable</span><span class=\"p\">[</span><span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">provider</span><span class=\"o\">.</span><span class=\"n\">Page</span><span class=\"p\">[</span><span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">fragments</span><span class=\"o\">.</span><span class=\"n\">ModuleFull</span><span class=\"p\">,</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">ModulesModulesPageInfo</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.tag", "modulename": "rush.doc", "qualname": "RushProvider.tag", "kind": "function", "doc": "<p>Add a list of tags to a module, module instance, or argument.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tags</strong>:  The list of tags to be added.</li>\n<li><strong>module_id</strong>:  The ID of the module to be tagged.</li>\n<li><strong>module_instance_id</strong>:  The ID of the module instance to be tagged.</li>\n<li><strong>argument_id</strong>:  The ID of the argument to be tagged.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The resulting full list of tags on the entity.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">module_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">module_instance_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">argument_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.untag", "modulename": "rush.doc", "qualname": "RushProvider.untag", "kind": "function", "doc": "<p>Remove a list of tags from a module, module instance, or argument.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tags</strong>:  The list of tags to be removed.</li>\n<li><strong>module_id</strong>:  The ID of the module to be untagged.</li>\n<li><strong>module_instance_id</strong>:  The ID of the module instance to be untagged.</li>\n<li><strong>argument_id</strong>:  The ID of the argument to be untagged.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The list of remaining tags.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">module_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">module_instance_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">argument_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.get_module_functions", "modulename": "rush.doc", "qualname": "RushProvider.get_module_functions", "kind": "function", "doc": "<p>Get a dictionary of module functions.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>names</strong>:  The names of the modules.</li>\n<li><strong>lockfile</strong>:  The lockfile to load the modules from.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A dictionary of module functions.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">names</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">lockfile</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">provider</span><span class=\"o\">.</span><span class=\"n\">RushModuleRunner</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.retry", "modulename": "rush.doc", "qualname": "RushProvider.retry", "kind": "function", "doc": "<p>Retry a module instance.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>id</strong>:  The ID of the module instance to be retried.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The ID of the new module instance.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"n\">uuid</span><span class=\"o\">.</span><span class=\"n\">UUID</span>,</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceTarget</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">input_types</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceResourcesInput</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">retry</span><span class=\"o\">.</span><span class=\"n\">RetryRetry</span>:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.upload", "modulename": "rush.doc", "qualname": "RushProvider.upload", "kind": "function", "doc": "<p>Upload an Object with typeinfo and store as an Argument.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file</strong>:  The file to be uploaded.</li>\n<li><strong>typeinfo</strong>:  The typeinfo of the file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">|</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">typeinfo</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.module_instance", "modulename": "rush.doc", "qualname": "RushProvider.module_instance", "kind": "function", "doc": "<p>Retrieve a module instance by its ID.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>id</strong>:  The ID of the module instance to be retrieved.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The retrieved module instance.\n  :raise Exception: If the module instance is not found.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"n\">uuid</span><span class=\"o\">.</span><span class=\"n\">UUID</span></span><span class=\"return-annotation\">) -> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">module_instance_details</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceDetailsModuleInstance</span>:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.logs", "modulename": "rush.doc", "qualname": "RushProvider.logs", "kind": "function", "doc": "<p>Retrieve the stdout and stderr of a module instance.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>id</strong>:  The ID of the module instance.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The stdout and stderr of the module instance.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"n\">uuid</span><span class=\"o\">.</span><span class=\"n\">UUID</span>,</span><span class=\"param\">\t<span class=\"n\">kind</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;stdout&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;stderr&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">after</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">before</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">pages</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">print_logs</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">AsyncIterable</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.delete_module_instance", "modulename": "rush.doc", "qualname": "RushProvider.delete_module_instance", "kind": "function", "doc": "<p>Delete a module instance with a given ID.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>id</strong>:  The ID of the module instance to be deleted.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The ID of the deleted module instance.\n  :raise RuntimeError: If the operation fails.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"n\">uuid</span><span class=\"o\">.</span><span class=\"n\">UUID</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.poll_module_instance", "modulename": "rush.doc", "qualname": "RushProvider.poll_module_instance", "kind": "function", "doc": "<p>Poll a module instance until it is completed, with a specified number of retries and poll rate.</p>\n\n<p>We do exponential backoff from 0.5s, so a retry only counts once we hit the input poll rate.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>id</strong>:  The ID of the module instance to be polled.</li>\n<li><strong>n_retries</strong>:  The maximum number of retries. Default is 10.</li>\n<li><strong>poll_rate</strong>:  The poll rate in seconds. Default is 30.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The completed module instance.\n  :raise Exception: If the module instance fails or polling times out.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"n\">uuid</span><span class=\"o\">.</span><span class=\"n\">UUID</span>, </span><span class=\"param\"><span class=\"n\">n_retries</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>, </span><span class=\"param\"><span class=\"n\">poll_rate</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">30</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.gmx", "modulename": "rush.doc", "qualname": "RushProvider.gmx", "kind": "function", "doc": "<p>Runs a molecular dynamics simluation using GROMACS from either protein, ligand pdbs or conformers as inputs.\nUses GMX 2023.3 <a href=\"https://doi.org/10.5281/zenodo.10017686\">https://doi.org/10.5281/zenodo.10017686</a> and Acpype <a href=\"https://doi.org/10.1186/1756-0500-5-367\">https://doi.org/10.1186/1756-0500-5-367</a></p>\n\n<p>Module version: <code>gmx_tengu_support/cb9c066a1fd43aa1e3982643eaaf8be21ec0a502</code></p>\n\n<p>QDX Type Description:</p>\n\n<pre><code>conformer: @Conformer?;\nprotein: @bytes?;\nligand: @bytes?;\ngmx-config: {\n    frame_sel: {delta_time_ps: u32, end_time_ps: u32, start_time_ps: u32}?,\n    ignore_hydrogens: bool?,\n    ligand_charge: i8?,\n    num_gpus: u8,\n    num_replicas: u8?,\n    params_overrides: {\n        em: {\n            coulombtype: string?,\n            cutoff_scheme: string?,\n            emstep: f64?,\n            emtol: f64?,\n            integrator: string?,\n            ns_type: string?,\n            nsteps: i32?,\n            nstlist: i32?,\n            pbc: string?,\n            rcoulomb: f64?,\n            rlist: f64?,\n            rvdw: f64?\n        }?,\n        ions: {\n            coulombtype: string?,\n            cutoff_scheme: string?,\n            emstep: f64?,\n            emtol: f64?,\n            integrator: string?,\n            nsteps: i32?,\n            nstlist: i32?,\n            pbc: string?,\n            rcoulomb: f64?,\n            rlist: f64?,\n            rvdw: f64?\n        }?,\n        md: {\n            compressibility: f64?,\n            constraint_algorithm: string?,\n            constraints: string?,\n            continuation: string?,\n            coulombtype: string?,\n            cutoff_scheme: string?,\n            disp_corr: string?,\n            dt: f64?,\n            fourierspacing: f64?,\n            gen_vel: string?,\n            integrator: string?,\n            lincs_iter: i32?,\n            lincs_order: i32?,\n            ns_type: string?,\n            nstenergy: i32?,\n            nsteps: i32?,\n            nstlist: i32?,\n            nstlog: i32?,\n            nstxout_compressed: i32?,\n            pbc: string?,\n            pcoupl: string?,\n            pcoupltype: string?,\n            pme_order: i32?,\n            rcoulomb: f64?,\n            ref_p: f64?,\n            ref_t: [f64]?,\n            rlist: f64?,\n            rvdw: f64?,\n            rvdw_switch: f64?,\n            tau_p: f64?,\n            tau_t: [f64]?,\n            tc_grps: string?,\n            tcoupl: string?,\n            vdw_modifier: string?,\n            vdwtype: string?\n        }?,\n        npt: {\n            compressibility: f64?,\n            constraint_algorithm: string?,\n            constraints: string?,\n            continuation: string?,\n            coulombtype: string?,\n            cutoff_scheme: string?,\n            define: string?,\n            disp_corr: string?,\n            dt: f64?,\n            fourierspacing: f64?,\n            gen_vel: string?,\n            integrator: string?,\n            lincs_iter: i32?,\n            lincs_order: i32?,\n            ns_type: string?,\n            nstenergy: i32?,\n            nsteps: i32?,\n            nstlist: i32?,\n            nstlog: i32?,\n            nstxout_compressed: i32?,\n            pbc: string?,\n            pcoupl: string?,\n            pcoupltype: string?,\n            pme_order: i32?,\n            rcoulomb: f64?,\n            ref_p: f64?,\n            ref_t: [f64]?,\n            refcoord_scaling: string?,\n            rlist: f64?,\n            rvdw: f64?,\n            rvdw_switch: f64?,\n            tau_p: f64?,\n            tau_t: [f64]?,\n            tc_grps: string?,\n            tcoupl: string?,\n            vdw_modifier: string?,\n            vdwtype: string?\n        }?,\n        nvt: {\n            constraint_algorithm: string?,\n            constraints: string?,\n            continuation: string?,\n            coulombtype: string?,\n            cutoff_scheme: string?,\n            define: string?,\n            disp_corr: string?,\n            dt: f64?,\n            fourierspacing: f64?,\n            gen_seed: i32?,\n            gen_temp: f64?,\n            gen_vel: string?,\n            integrator: string?,\n            lincs_iter: i32?,\n            lincs_order: i32?,\n            ns_type: string?,\n            nstenergy: i32?,\n            nsteps: i32?,\n            nstlist: i32?,\n            nstlog: i32?,\n            nstxout_compressed: i32?,\n            pbc: string?,\n            pcoupl: string?,\n            pme_order: i32?,\n            rcoulomb: f64?,\n            ref_t: [f64]?,\n            rlist: f64?,\n            rvdw: f64?,\n            rvdw_switch: f64?,\n            tau_t: [f64]?,\n            tc_grps: string?,\n            tcoupl: string?,\n            vdw_modifier: string?,\n            vdwtype: string?\n        }?\n    }?,\n    save_wets: bool\n}\n-&gt;\noutput_gros: @bytes;\noutput_tprs: @bytes;\noutput_tops: @bytes;\noutput_logs: @bytes;\noutput_ndx: @bytes;\noutput_xtcs_dry: @bytes;\noutput_frames_pdb_dry: @bytes;\noutput_xtcs_wet: @bytes\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>conformer</strong>:  Optional Conformer in QDXF format; must provide either this argument, or the Protein PDB argument</li>\n<li><strong>protein</strong>:  Protein PDB file; provide this if no Conformer qdxf is provided</li>\n<li><strong>ligand</strong>:  Ligand PDB file</li>\n<li><strong>gmx-config</strong>:  Configuration record</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Intermediate and final structure files through the simulation</p>\n</blockquote>\n\n<h6 id=\"returns-2\">Returns</h6>\n\n<blockquote>\n  <p>.tpr files of the production MD runs</p>\n</blockquote>\n\n<h6 id=\"returns-3\">Returns</h6>\n\n<blockquote>\n  <p>.top files, and relevant .itp files used in the simulation</p>\n</blockquote>\n\n<h6 id=\"returns-4\">Returns</h6>\n\n<blockquote>\n  <p>Logs of the production MD runs</p>\n</blockquote>\n\n<h6 id=\"returns-5\">Returns</h6>\n\n<blockquote>\n  <p>Index file</p>\n</blockquote>\n\n<h6 id=\"returns-6\">Returns</h6>\n\n<blockquote>\n  <p>Dry trajectories, i.e., without water molecules, from the production MD runs</p>\n</blockquote>\n\n<h6 id=\"returns-7\">Returns</h6>\n\n<blockquote>\n  <p>Outputs of select_frame; pdb frames without water</p>\n</blockquote>\n\n<h6 id=\"returns-8\">Returns</h6>\n\n<blockquote>\n  <p>Wet trajectories, i.e., with water molecules, from the production MD runs</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceTarget</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ModuleInstanceTarget</span><span class=\"o\">.</span><span class=\"n\">GADI_GPU</span><span class=\"p\">:</span> <span class=\"s1\">&#39;GADI_GPU&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">input_types</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceResourcesInput</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"n\">ModuleInstanceResourcesInput</span><span class=\"p\">(</span><span class=\"n\">gpus</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">cpus</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">nodes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage</span><span class=\"o\">=</span><span class=\"mi\">1034</span><span class=\"p\">,</span> <span class=\"n\">storage_units</span><span class=\"o\">=&lt;</span><span class=\"n\">MemUnits</span><span class=\"o\">.</span><span class=\"n\">MB</span><span class=\"p\">:</span> <span class=\"s1\">&#39;MB&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">walltime</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage_mounts</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">restore</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> [&lt;class &#x27;pathlib.Path&#x27;&gt;, &lt;class &#x27;pathlib.Path&#x27;&gt;, &lt;class &#x27;pathlib.Path&#x27;&gt;, &lt;class &#x27;pathlib.Path&#x27;&gt;, &lt;class &#x27;pathlib.Path&#x27;&gt;, &lt;class &#x27;pathlib.Path&#x27;&gt;, &lt;class &#x27;pathlib.Path&#x27;&gt;, &lt;class &#x27;pathlib.Path&#x27;&gt;]:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.prepare_protein", "modulename": "rush.doc", "qualname": "RushProvider.prepare_protein", "kind": "function", "doc": "<p>Prepare a PDB for downstream tasks: protonate, fill missing atoms, etc.</p>\n\n<p>Module version: <code>prepare_protein/83bed2ad1f01f495c94518717f9f5b1bd7fe855c</code></p>\n\n<p>QDX Type Description:</p>\n\n<pre><code>input_pdb: @bytes\n-&gt;\noutput_qdxf: @[Conformer];\noutput_pdb: @bytes\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_pdb: An input protein as a file</strong>:  one PDB file</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>one qdxf per model in pdb</p>\n</blockquote>\n\n<h6 id=\"returns-2\">Returns</h6>\n\n<blockquote>\n  <p>one PDB file</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t*args: [&lt;class &#x27;pathlib.Path&#x27;&gt;],</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceTarget</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ModuleInstanceTarget</span><span class=\"o\">.</span><span class=\"n\">NIX_SSH</span><span class=\"p\">:</span> <span class=\"s1\">&#39;NIX_SSH&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">input_types</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceResourcesInput</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"n\">ModuleInstanceResourcesInput</span><span class=\"p\">(</span><span class=\"n\">gpus</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">cpus</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">nodes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage</span><span class=\"o\">=</span><span class=\"mi\">138</span><span class=\"p\">,</span> <span class=\"n\">storage_units</span><span class=\"o\">=&lt;</span><span class=\"n\">MemUnits</span><span class=\"o\">.</span><span class=\"n\">MB</span><span class=\"p\">:</span> <span class=\"s1\">&#39;MB&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">walltime</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage_mounts</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">restore</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> [&lt;class &#x27;pathlib.Path&#x27;&gt;, &lt;class &#x27;pathlib.Path&#x27;&gt;]:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.pdb2pqr", "modulename": "rush.doc", "qualname": "RushProvider.pdb2pqr", "kind": "function", "doc": "<p>Prepare a PDB for downstream tasks: protonate, fill missing atoms, etc.</p>\n\n<p>Module version: <code>prepare_protein/83bed2ad1f01f495c94518717f9f5b1bd7fe855c</code></p>\n\n<p>QDX Type Description:</p>\n\n<pre><code>input_pdb: @bytes\n-&gt;\noutput_pdb: @bytes\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_pdb: An input molecule as a file</strong>:  one PDB file</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A new PDB file with the protonated and charged version of the input PDB</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t*args: [&lt;class &#x27;pathlib.Path&#x27;&gt;],</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceTarget</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ModuleInstanceTarget</span><span class=\"o\">.</span><span class=\"n\">NIX_SSH_3</span><span class=\"p\">:</span> <span class=\"s1\">&#39;NIX_SSH_3&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">input_types</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceResourcesInput</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"n\">ModuleInstanceResourcesInput</span><span class=\"p\">(</span><span class=\"n\">gpus</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">cpus</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">nodes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage</span><span class=\"o\">=</span><span class=\"mi\">138</span><span class=\"p\">,</span> <span class=\"n\">storage_units</span><span class=\"o\">=&lt;</span><span class=\"n\">MemUnits</span><span class=\"o\">.</span><span class=\"n\">MB</span><span class=\"p\">:</span> <span class=\"s1\">&#39;MB&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">walltime</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage_mounts</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">restore</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> [&lt;class &#x27;pathlib.Path&#x27;&gt;]:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.cairo", "modulename": "rush.doc", "qualname": "RushProvider.cairo", "kind": "function", "doc": "<p>Conformer search algorithm. Finds candidate conformers for a molecular system ranked by their energy.</p>\n\n<p>Module version: <code>cairo/665b83a4ed8ff5e811fcbd9e55ddf8f21e820aeb</code></p>\n\n<p>QDX Type Description:</p>\n\n<pre><code>input: @Conformer;\nparameters: {\n    conquest_parameters: {\n        dihedral_mutation_rate: f64,\n        energy_oracle: Orion | Hermes,\n        finite_difference_h: f64,\n        finite_difference_max_iterations: u32,\n        finite_difference_step: f64,\n        fitness_alpha: f64,\n        fitness_beta: f64,\n        num_rounds: u32,\n        optimiser: XTB | FDHermes,\n        population_size: u32,\n        ring_mutation_rate: f64,\n        selection_threshold: f64,\n        tfd_similarity_threshold: f64\n    },\n    num_conformations: u32\n}\n-&gt;\nconformers: @[Conformer];\nenergies: @[f64]\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input</strong>:  A Conformer. The Conformer's Topology requires formal charges.</li>\n<li><strong>parameters: A Record containing the following fields</strong>: \nnum_rounds - is the number of rounds the genetic algorithm will run for\npopulation_size - number of candidate Conformers during each round of genetic algorithm\nfitness_alpha - tunable parameter (\u03b1) for fitness function\nfitness_beta - tunable parameter (\u03b2) for fitness function\nselection_threshold - proportion of population in round that will be freshly generated (via mutation and crossover)\ntfd_similarity_threshold - Torsional Fingerprint Difference (TFD) threshold is used to discard candidates that are too similar\noptimiser - geometry optimiser to use. Choices are: 'fd_hermes' and 'xtb'\nfinite_difference_max_iterations - max number of iterations per finite difference calculation. Only relevant if Hermes optimiser is selected\nfinite_difference_h - spacing parameter for finite difference calculation. Only relevant if Hermes optimiser is selected\nfinite_difference_step - step size for finite difference calculation. Only relevant if Hermes optimiser is selected\ndihedral_mutation_rate - probability that a dihedral (rotatable bond) will be mutated during each genetic algorithm round\nring_mutation_rate - probability that a ring will be mutated during each genetic algorithm round\nenergy_oracle - method used to compute energies. Choices are: 'hermes' or 'orion'\nnum_conformations - number of conformations that Cairo will output</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of generated conformers</p>\n</blockquote>\n\n<h6 id=\"returns-2\">Returns</h6>\n\n<blockquote>\n  <p>The energies of each generated conformer</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t*args: [&lt;class &#x27;pathlib.Path&#x27;&gt;, dict[str, ~T]],</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceTarget</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ModuleInstanceTarget</span><span class=\"o\">.</span><span class=\"n\">NIX_SSH_2_GPU</span><span class=\"p\">:</span> <span class=\"s1\">&#39;NIX_SSH_2_GPU&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">input_types</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceResourcesInput</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"n\">ModuleInstanceResourcesInput</span><span class=\"p\">(</span><span class=\"n\">gpus</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">cpus</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">nodes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">storage_units</span><span class=\"o\">=&lt;</span><span class=\"n\">MemUnits</span><span class=\"o\">.</span><span class=\"n\">MB</span><span class=\"p\">:</span> <span class=\"s1\">&#39;MB&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">walltime</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage_mounts</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">restore</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> [&lt;class &#x27;pathlib.Path&#x27;&gt;, &lt;class &#x27;pathlib.Path&#x27;&gt;]:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.pbsa", "modulename": "rush.doc", "qualname": "RushProvider.pbsa", "kind": "function", "doc": "<p>Compute the solvation energy of a Conformer via the Poisson-Boltzmann Surface Area (PBSA) method</p>\n\n<p>Module version: <code>pbsa-cuda/399ed826b15af36391e7ab9cea93b5e551e784bf</code></p>\n\n<p>QDX Type Description:</p>\n\n<pre><code>input: @Conformer;\nparams: {\n    box_size_factor: f64,\n    convergence: f64,\n    ion_concentration: f64,\n    sasa_beta: f64,\n    sasa_gamma: f64,\n    sasa_n_samples: u64,\n    solute_dielectric: f64,\n    solvent_dielectric: f64,\n    solvent_radius: f64,\n    spacing: f64,\n    temperature: f64\n}\n-&gt;\nenergy: f64;\npolar_energy: f64;\nnon_polar_energy: f64\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input</strong>:  A Conformer. The Conformer's Topology needs to have partial_charges.</li>\n<li><strong>params: A Record containing the following fields</strong>: \nsolute dielectric - Dielectric constant of the solute\nsolvent dielectric - Dielectric constant of the solvent\nsolvent radius - Radius of the solvent in nm\nion_concentration - Concentration of the ion in mol/nm^3 PBSA calculation assume that there are equal amounts of positive and negative ions, and that they have a charge of +/-e\ntemperature - temperature in Kelvin (K)\nspacing - spacing distance in the lattice in nm\nsasa_gamma - Gamma parameter for the non-polar energy computation, in kJ / (mol . nm^2).\nsasa_beta - Beta parameter for the non-polar energy computation in kJ / (mol . nm^2)\nsasa_n_samples - Number of samples to use on the surface of a sphere when approximating the SASA\nconvergence - Threshold for convergence of the CGG\nbox_size_factor - Factor by which to scale the dimensions of the lattice that contains the molecule. If the molecule has length <code>l</code> in a given dimension, then the lattice length in that dimension will be <code>l + box_scale_factor * l</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Total solvation energy, in Hartrees. Total solvation energy is the sum of polar and non-polar solvation energy</p>\n</blockquote>\n\n<h6 id=\"returns-2\">Returns</h6>\n\n<blockquote>\n  <p>Polar solvation energy, in Hartrees</p>\n</blockquote>\n\n<h6 id=\"returns-3\">Returns</h6>\n\n<blockquote>\n  <p>Non-polar solvation energy, in Hartrees</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t*args: [&lt;class &#x27;pathlib.Path&#x27;&gt;, dict[str, ~T]],</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceTarget</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ModuleInstanceTarget</span><span class=\"o\">.</span><span class=\"n\">NIX_SSH_3_GPU</span><span class=\"p\">:</span> <span class=\"s1\">&#39;NIX_SSH_3_GPU&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">input_types</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceResourcesInput</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"n\">ModuleInstanceResourcesInput</span><span class=\"p\">(</span><span class=\"n\">gpus</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">cpus</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">nodes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">storage_units</span><span class=\"o\">=&lt;</span><span class=\"n\">MemUnits</span><span class=\"o\">.</span><span class=\"n\">MB</span><span class=\"p\">:</span> <span class=\"s1\">&#39;MB&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">walltime</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage_mounts</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">restore</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> [&lt;class &#x27;float&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;]:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.qp_gen_inputs", "modulename": "rush.doc", "qualname": "RushProvider.qp_gen_inputs", "kind": "function", "doc": "<p>Takes a protein and ligand and outputs a QP input.</p>\n\n<p>Module version: <code>tengu-prelude/efc6d8b3a8cc342cd9866d037abb77dac40a4d56</code></p>\n\n<p>QDX Type Description:</p>\n\n<pre><code>md_frame_pdb: @bytes;\nlig_gmx_gro: @bytes;\nlig_sdf_mol2: @bytes;\nmodel: {aux_basis: string, basis: string, frag_enabled: bool?, method: RHF | RIMP2}?;\nkeywords: {\n    debug: {\n        dry_run: bool?,\n        n_fragments_to_compute: u32?,\n        print_xyz_coords: bool?,\n        rimp2_print_level: u32?,\n        scf_print_level: u32?,\n        subfragment_xyz_debug: bool?\n    },\n    export: {\n        coefficient_export: bool?,\n        density_export: bool?,\n        export_excludes_hydrogen_caps: bool?,\n        gradient_export: bool?,\n        monolithic_density_export: bool?,\n        monolithic_gradient_export: bool?,\n        orbital_rotation_export: bool?,\n        overlap_export: bool?\n    },\n    frag: {\n        cap_to_empirical_bond_lengths: bool?,\n        dimer_cutoff: u32?,\n        dimer_mp2_cutoff: u32?,\n        fragmentation_level: u8,\n        fragmented_energy_type: TotalEnergy | InteractivityEnergy,\n        method: string,\n        monomer_cutoff: u32?,\n        monomer_mp2_cutoff: u32?,\n        ngpus_per_node: u32,\n        reference_fragment: u32?,\n        subset_of_fragments_to_calculate: [u32]?,\n        trimer_cutoff: u32?,\n        trimer_mp2_cutoff: u32?\n    },\n    guess: {\n        basis_set_projection: bool?,\n        basis_set_projection_bootstrap_basis: bool?,\n        basis_set_projection_scf_keywords: {\n            convergence_metric: string,\n            dynamic_screening_threshold_exp: u32,\n            ndiis: u32,\n            niter: u32,\n            qnext: bool?,\n            rihf: bool?,\n            scf_conv: f64\n        }?,\n        superposition_monomer_densities: bool?,\n        superposition_subfragment_densities: bool?,\n        superposition_subfragment_densities_scf_keywords: {\n            convergence_metric: string,\n            dynamic_screening_threshold_exp: u32,\n            ndiis: u32,\n            niter: u32,\n            qnext: bool?,\n            rihf: bool?,\n            scf_conv: f64\n        }?,\n        superposition_subfragment_densities_target_size: u32?\n    },\n    scf: {\n        convergence_metric: string,\n        dynamic_screening_threshold_exp: u32,\n        ndiis: u32,\n        niter: u32,\n        qnext: bool?,\n        rihf: bool?,\n        scf_conv: f64\n    }\n}?;\nqp_options: {\n    amino_acids_of_interest: [(string, i32)]?,\n    ligand_file_type: sdf | mol2,\n    ligand_res_id: string,\n    use_new_fragmentation_method: bool?\n}\n-&gt;\noutput: @Conformer;\nmodel: {aux_basis: string, basis: string, frag_enabled: bool?, method: RHF | RIMP2}?;\nkeywords: {\n    debug: {\n        dry_run: bool?,\n        n_fragments_to_compute: u32?,\n        print_xyz_coords: bool?,\n        rimp2_print_level: u32?,\n        scf_print_level: u32?,\n        subfragment_xyz_debug: bool?\n    },\n    export: {\n        coefficient_export: bool?,\n        density_export: bool?,\n        export_excludes_hydrogen_caps: bool?,\n        gradient_export: bool?,\n        monolithic_density_export: bool?,\n        monolithic_gradient_export: bool?,\n        orbital_rotation_export: bool?,\n        overlap_export: bool?\n    },\n    frag: {\n        cap_to_empirical_bond_lengths: bool?,\n        dimer_cutoff: u32?,\n        dimer_mp2_cutoff: u32?,\n        fragmentation_level: u8,\n        fragmented_energy_type: TotalEnergy | InteractivityEnergy,\n        method: string,\n        monomer_cutoff: u32?,\n        monomer_mp2_cutoff: u32?,\n        ngpus_per_node: u32,\n        reference_fragment: u32?,\n        subset_of_fragments_to_calculate: [u32]?,\n        trimer_cutoff: u32?,\n        trimer_mp2_cutoff: u32?\n    },\n    guess: {\n        basis_set_projection: bool?,\n        basis_set_projection_bootstrap_basis: bool?,\n        basis_set_projection_scf_keywords: {\n            convergence_metric: string,\n            dynamic_screening_threshold_exp: u32,\n            ndiis: u32,\n            niter: u32,\n            qnext: bool?,\n            rihf: bool?,\n            scf_conv: f64\n        }?,\n        superposition_monomer_densities: bool?,\n        superposition_subfragment_densities: bool?,\n        superposition_subfragment_densities_scf_keywords: {\n            convergence_metric: string,\n            dynamic_screening_threshold_exp: u32,\n            ndiis: u32,\n            niter: u32,\n            qnext: bool?,\n            rihf: bool?,\n            scf_conv: f64\n        }?,\n        superposition_subfragment_densities_target_size: u32?\n    },\n    scf: {\n        convergence_metric: string,\n        dynamic_screening_threshold_exp: u32,\n        ndiis: u32,\n        niter: u32,\n        qnext: bool?,\n        rihf: bool?,\n        scf_conv: f64\n    }\n}?;\namino_acids_of_interest: [(string, u32)]\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>md_frame_pdb</strong>:  PDB file of the protein</li>\n<li><strong>lig_gmx_gro</strong>:  GROMACS GRO file of the ligand</li>\n<li><strong>lig_sdf_mol2</strong>:  SDF or MOL2 file of the ligand</li>\n<li><strong>model</strong>:  Model of the protein</li>\n<li><strong>keywords</strong>:  Keywords for the QP calculation</li>\n<li><strong>qp_options: QP options</strong>: \nuse_new_fragmentation_method: Option<bool> - Use new fragmentation method\namino_acids_of_interest: Option<Vec&lt;(String, i32)&gt;&gt; - Amino acids of interest\nligand_res_id: String - Residue ID of the ligand\nligand_file_type: LigFileType - Type of the ligand file</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>QDXF conformer</p>\n</blockquote>\n\n<h6 id=\"returns-2\">Returns</h6>\n\n<blockquote>\n  <p>Hermes Model config</p>\n</blockquote>\n\n<h6 id=\"returns-3\">Returns</h6>\n\n<blockquote>\n  <p>Hermes Keywords config</p>\n</blockquote>\n\n<h6 id=\"returns-4\">Returns</h6>\n\n<blockquote>\n  <p>Mapping of amino acids of interest to their corresponding fragments</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t*args: [&lt;class &#x27;pathlib.Path&#x27;&gt;, &lt;class &#x27;pathlib.Path&#x27;&gt;, &lt;class &#x27;pathlib.Path&#x27;&gt;, typing.Optional[~T], typing.Optional[~T], dict[str, ~T]],</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceTarget</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ModuleInstanceTarget</span><span class=\"o\">.</span><span class=\"n\">NIX</span><span class=\"p\">:</span> <span class=\"s1\">&#39;NIX&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">input_types</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceResourcesInput</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"n\">ModuleInstanceResourcesInput</span><span class=\"p\">(</span><span class=\"n\">gpus</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">cpus</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">nodes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">storage_units</span><span class=\"o\">=&lt;</span><span class=\"n\">MemUnits</span><span class=\"o\">.</span><span class=\"n\">MB</span><span class=\"p\">:</span> <span class=\"s1\">&#39;MB&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">walltime</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage_mounts</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">restore</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> [&lt;class &#x27;pathlib.Path&#x27;&gt;, typing.Optional[~T], typing.Optional[~T], list[~T]]:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.qp_collate", "modulename": "rush.doc", "qualname": "RushProvider.qp_collate", "kind": "function", "doc": "<p>Takes hermes results and amino acid to fragment indexes and outputs interaction energies.</p>\n\n<p>Module version: <code>tengu-prelude/efc6d8b3a8cc342cd9866d037abb77dac40a4d56</code></p>\n\n<p>QDX Type Description:</p>\n\n<pre><code>hermes_results: @{\n    dimer_energies: DimerEnergies?,\n    energy: Energy,\n    fragment_basis_functions: [{\n        n_occupied_basis_functions: u32,\n        n_virtual_basis_functions: u32,\n        total_n_basis_functions: u32\n    }]?,\n    full_system_basis_functions: {\n        n_occupied_basis_functions: u32,\n        n_virtual_basis_functions: u32,\n        total_n_basis_functions: u32\n    }?,\n    monomer_energies: MonomerEnergies?,\n    trimer_energies: TrimerEnergies?\n};\namino_acid_to_fragment_indexes: [(string, u32)]\n-&gt;\nout: @{\n    amino_acid_interaction_energies: [{\n        amino_acid_id: string,\n        dimer_hf_interaction_e: f64,\n        dimer_mp2_os_interaction_e: f64?,\n        dimer_mp2_ss_interaction_e: f64?\n    }],\n    amino_acid_to_fragment_indexes: [(string, u32)],\n    dimer_hf_energies: [f64],\n    dimer_hf_interaction_energies: [f64],\n    dimer_mp2_os_energies: [f64?],\n    dimer_mp2_os_interaction_energies: [f64?],\n    dimer_mp2_ss_energies: [f64?],\n    dimer_mp2_ss_interaction_energies: [f64?],\n    dimer_pairs: [[u32]],\n    full_lattice_energy: (f64, f64?, f64?)\n}\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>hermes_results</strong>:  hermes results</li>\n<li><strong>amino_acid_to_fragment_indexes</strong>:  amino acid to fragment indexes, from qp-gen-inputs</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t*args: [&lt;class &#x27;pathlib.Path&#x27;&gt;, list[~T]],</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceTarget</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ModuleInstanceTarget</span><span class=\"o\">.</span><span class=\"n\">NIX</span><span class=\"p\">:</span> <span class=\"s1\">&#39;NIX&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">input_types</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceResourcesInput</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"n\">ModuleInstanceResourcesInput</span><span class=\"p\">(</span><span class=\"n\">gpus</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">cpus</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">nodes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">storage_units</span><span class=\"o\">=&lt;</span><span class=\"n\">MemUnits</span><span class=\"o\">.</span><span class=\"n\">MB</span><span class=\"p\">:</span> <span class=\"s1\">&#39;MB&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">walltime</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage_mounts</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">restore</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> [&lt;class &#x27;pathlib.Path&#x27;&gt;]:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.pick_conformer", "modulename": "rush.doc", "qualname": "RushProvider.pick_conformer", "kind": "function", "doc": "<p>Selects a single conformer from a vec of conformers. NOTE: will be deprecated in future once mapping is supported</p>\n\n<p>Module version: <code>tengu-prelude/efc6d8b3a8cc342cd9866d037abb77dac40a4d56</code></p>\n\n<p>QDX Type Description:</p>\n\n<pre><code>in: @[Conformer];\nin: u8\n-&gt;\nout: @Conformer\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t*args: [&lt;class &#x27;pathlib.Path&#x27;&gt;, &lt;class &#x27;int&#x27;&gt;],</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceTarget</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ModuleInstanceTarget</span><span class=\"o\">.</span><span class=\"n\">NIX</span><span class=\"p\">:</span> <span class=\"s1\">&#39;NIX&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">input_types</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceResourcesInput</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"n\">ModuleInstanceResourcesInput</span><span class=\"p\">(</span><span class=\"n\">gpus</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">cpus</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">nodes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">storage_units</span><span class=\"o\">=&lt;</span><span class=\"n\">MemUnits</span><span class=\"o\">.</span><span class=\"n\">MB</span><span class=\"p\">:</span> <span class=\"s1\">&#39;MB&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">walltime</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage_mounts</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">restore</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> [&lt;class &#x27;pathlib.Path&#x27;&gt;]:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.pdbfixer", "modulename": "rush.doc", "qualname": "RushProvider.pdbfixer", "kind": "function", "doc": "<p>Runs a pdb through pdbfixer</p>\n\n<p>Module version: <code>tengu-prelude/efc6d8b3a8cc342cd9866d037abb77dac40a4d56</code></p>\n\n<p>QDX Type Description:</p>\n\n<pre><code>input: @bytes;\nflags: [string]?\n-&gt;\noutput: @bytes\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input</strong>:  pdb file</li>\n<li><strong>flags</strong>:  optional vec of flags to pass to pdbfixer</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>fixed pdb file</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t*args: [&lt;class &#x27;pathlib.Path&#x27;&gt;, typing.Optional[~T]],</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceTarget</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ModuleInstanceTarget</span><span class=\"o\">.</span><span class=\"n\">NIX_SSH</span><span class=\"p\">:</span> <span class=\"s1\">&#39;NIX_SSH&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">input_types</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceResourcesInput</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"n\">ModuleInstanceResourcesInput</span><span class=\"p\">(</span><span class=\"n\">gpus</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">cpus</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">nodes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">storage_units</span><span class=\"o\">=&lt;</span><span class=\"n\">MemUnits</span><span class=\"o\">.</span><span class=\"n\">MB</span><span class=\"p\">:</span> <span class=\"s1\">&#39;MB&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">walltime</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage_mounts</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">restore</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> [&lt;class &#x27;pathlib.Path&#x27;&gt;]:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.hermes_lattice", "modulename": "rush.doc", "qualname": "RushProvider.hermes_lattice", "kind": "function", "doc": "<p>Runs a HERMES energy calculation given a protein topology, a optionally a ligand topology, and optionally model and keyword configurations.\n// Will use the default model and keywords if none are provided. If you do not provide a ligand topology, the final fragment in your protein topology will be considered to be the ligand</p>\n\n<p>Module version: <code>tengu-prelude/efc6d8b3a8cc342cd9866d037abb77dac40a4d56</code></p>\n\n<p>QDX Type Description:</p>\n\n<pre><code>protein: @Conformer;\nligand: @Conformer?;\nmodel: {aux_basis: string, basis: string, frag_enabled: bool?, method: RHF | RIMP2}?;\nkeywords: {\n    debug: {\n        dry_run: bool?,\n        n_fragments_to_compute: u32?,\n        print_xyz_coords: bool?,\n        rimp2_print_level: u32?,\n        scf_print_level: u32?,\n        subfragment_xyz_debug: bool?\n    },\n    export: {\n        coefficient_export: bool?,\n        density_export: bool?,\n        export_excludes_hydrogen_caps: bool?,\n        gradient_export: bool?,\n        monolithic_density_export: bool?,\n        monolithic_gradient_export: bool?,\n        orbital_rotation_export: bool?,\n        overlap_export: bool?\n    },\n    frag: {\n        cap_to_empirical_bond_lengths: bool?,\n        dimer_cutoff: u32?,\n        dimer_mp2_cutoff: u32?,\n        fragmentation_level: u8,\n        fragmented_energy_type: TotalEnergy | InteractivityEnergy,\n        method: string,\n        monomer_cutoff: u32?,\n        monomer_mp2_cutoff: u32?,\n        ngpus_per_node: u32,\n        reference_fragment: u32?,\n        subset_of_fragments_to_calculate: [u32]?,\n        trimer_cutoff: u32?,\n        trimer_mp2_cutoff: u32?\n    },\n    guess: {\n        basis_set_projection: bool?,\n        basis_set_projection_bootstrap_basis: bool?,\n        basis_set_projection_scf_keywords: {\n            convergence_metric: string,\n            dynamic_screening_threshold_exp: u32,\n            ndiis: u32,\n            niter: u32,\n            qnext: bool?,\n            rihf: bool?,\n            scf_conv: f64\n        }?,\n        superposition_monomer_densities: bool?,\n        superposition_subfragment_densities: bool?,\n        superposition_subfragment_densities_scf_keywords: {\n            convergence_metric: string,\n            dynamic_screening_threshold_exp: u32,\n            ndiis: u32,\n            niter: u32,\n            qnext: bool?,\n            rihf: bool?,\n            scf_conv: f64\n        }?,\n        superposition_subfragment_densities_target_size: u32?\n    },\n    scf: {\n        convergence_metric: string,\n        dynamic_screening_threshold_exp: u32,\n        ndiis: u32,\n        niter: u32,\n        qnext: bool?,\n        rihf: bool?,\n        scf_conv: f64\n    }\n}?\n-&gt;\nenergy: @{\n    dimer_energies: DimerEnergies?,\n    energy: Energy,\n    fragment_basis_functions: [{\n        n_occupied_basis_functions: u32,\n        n_virtual_basis_functions: u32,\n        total_n_basis_functions: u32\n    }]?,\n    full_system_basis_functions: {\n        n_occupied_basis_functions: u32,\n        n_virtual_basis_functions: u32,\n        total_n_basis_functions: u32\n    }?,\n    monomer_energies: MonomerEnergies?,\n    trimer_energies: TrimerEnergies?\n};\ngradient bytes: @bytes\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>protein</strong>:  Conformer with topology for protein (or protein and ligand if ligand is not provided)</li>\n<li><strong>ligand</strong>:  Optional Conformer with topology</li>\n<li><strong>model</strong>:  Optional Model configuration</li>\n<li><strong>keywords</strong>:  Optional Keywords configuration</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>energy results</p>\n</blockquote>\n\n<h6 id=\"returns-2\">Returns</h6>\n\n<blockquote>\n  <p>tar.gz compressed gradient bytes</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t*args: [&lt;class &#x27;pathlib.Path&#x27;&gt;, typing.Optional[~T], typing.Optional[~T], typing.Optional[~T]],</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceTarget</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ModuleInstanceTarget</span><span class=\"o\">.</span><span class=\"n\">NIX_SSH_GPU</span><span class=\"p\">:</span> <span class=\"s1\">&#39;NIX_SSH_GPU&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">input_types</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceResourcesInput</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"n\">ModuleInstanceResourcesInput</span><span class=\"p\">(</span><span class=\"n\">gpus</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">cpus</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">nodes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage</span><span class=\"o\">=</span><span class=\"mi\">1034</span><span class=\"p\">,</span> <span class=\"n\">storage_units</span><span class=\"o\">=&lt;</span><span class=\"n\">MemUnits</span><span class=\"o\">.</span><span class=\"n\">MB</span><span class=\"p\">:</span> <span class=\"s1\">&#39;MB&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">walltime</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage_mounts</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">restore</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> [&lt;class &#x27;pathlib.Path&#x27;&gt;, &lt;class &#x27;pathlib.Path&#x27;&gt;]:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.hermes_energy", "modulename": "rush.doc", "qualname": "RushProvider.hermes_energy", "kind": "function", "doc": "<p>Runs a HERMES energy calculation given a topology, and optionally model and keyword configurations.\nWill use the default model and keywords if none are provided</p>\n\n<p>Module version: <code>tengu-prelude/efc6d8b3a8cc342cd9866d037abb77dac40a4d56</code></p>\n\n<p>QDX Type Description:</p>\n\n<pre><code>input: @Conformer;\nmodel: {aux_basis: string, basis: string, frag_enabled: bool?, method: RHF | RIMP2}?;\nkeywords: {\n    debug: {\n        dry_run: bool?,\n        n_fragments_to_compute: u32?,\n        print_xyz_coords: bool?,\n        rimp2_print_level: u32?,\n        scf_print_level: u32?,\n        subfragment_xyz_debug: bool?\n    },\n    export: {\n        coefficient_export: bool?,\n        density_export: bool?,\n        export_excludes_hydrogen_caps: bool?,\n        gradient_export: bool?,\n        monolithic_density_export: bool?,\n        monolithic_gradient_export: bool?,\n        orbital_rotation_export: bool?,\n        overlap_export: bool?\n    },\n    frag: {\n        cap_to_empirical_bond_lengths: bool?,\n        dimer_cutoff: u32?,\n        dimer_mp2_cutoff: u32?,\n        fragmentation_level: u8,\n        fragmented_energy_type: TotalEnergy | InteractivityEnergy,\n        method: string,\n        monomer_cutoff: u32?,\n        monomer_mp2_cutoff: u32?,\n        ngpus_per_node: u32,\n        reference_fragment: u32?,\n        subset_of_fragments_to_calculate: [u32]?,\n        trimer_cutoff: u32?,\n        trimer_mp2_cutoff: u32?\n    },\n    guess: {\n        basis_set_projection: bool?,\n        basis_set_projection_bootstrap_basis: bool?,\n        basis_set_projection_scf_keywords: {\n            convergence_metric: string,\n            dynamic_screening_threshold_exp: u32,\n            ndiis: u32,\n            niter: u32,\n            qnext: bool?,\n            rihf: bool?,\n            scf_conv: f64\n        }?,\n        superposition_monomer_densities: bool?,\n        superposition_subfragment_densities: bool?,\n        superposition_subfragment_densities_scf_keywords: {\n            convergence_metric: string,\n            dynamic_screening_threshold_exp: u32,\n            ndiis: u32,\n            niter: u32,\n            qnext: bool?,\n            rihf: bool?,\n            scf_conv: f64\n        }?,\n        superposition_subfragment_densities_target_size: u32?\n    },\n    scf: {\n        convergence_metric: string,\n        dynamic_screening_threshold_exp: u32,\n        ndiis: u32,\n        niter: u32,\n        qnext: bool?,\n        rihf: bool?,\n        scf_conv: f64\n    }\n}?\n-&gt;\nenergy: @{\n    dimer_energies: DimerEnergies?,\n    energy: Energy,\n    fragment_basis_functions: [{\n        n_occupied_basis_functions: u32,\n        n_virtual_basis_functions: u32,\n        total_n_basis_functions: u32\n    }]?,\n    full_system_basis_functions: {\n        n_occupied_basis_functions: u32,\n        n_virtual_basis_functions: u32,\n        total_n_basis_functions: u32\n    }?,\n    monomer_energies: MonomerEnergies?,\n    trimer_energies: TrimerEnergies?\n};\ngradient bytes: @bytes\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input</strong>:  Conformer with topology</li>\n<li><strong>model</strong>:  Optional Model configuration</li>\n<li><strong>keywords</strong>:  Optional Keywords configuration</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>energy results</p>\n</blockquote>\n\n<h6 id=\"returns-2\">Returns</h6>\n\n<blockquote>\n  <p>tar.gz compressed gradient bytes</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t*args: [&lt;class &#x27;pathlib.Path&#x27;&gt;, typing.Optional[~T], typing.Optional[~T]],</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceTarget</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ModuleInstanceTarget</span><span class=\"o\">.</span><span class=\"n\">NIX_SSH_GPU</span><span class=\"p\">:</span> <span class=\"s1\">&#39;NIX_SSH_GPU&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">input_types</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceResourcesInput</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"n\">ModuleInstanceResourcesInput</span><span class=\"p\">(</span><span class=\"n\">gpus</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">cpus</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">nodes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage</span><span class=\"o\">=</span><span class=\"mi\">1034</span><span class=\"p\">,</span> <span class=\"n\">storage_units</span><span class=\"o\">=&lt;</span><span class=\"n\">MemUnits</span><span class=\"o\">.</span><span class=\"n\">MB</span><span class=\"p\">:</span> <span class=\"s1\">&#39;MB&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">walltime</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage_mounts</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">restore</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> [&lt;class &#x27;pathlib.Path&#x27;&gt;, &lt;class &#x27;pathlib.Path&#x27;&gt;]:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.hermes_binding", "modulename": "rush.doc", "qualname": "RushProvider.hermes_binding", "kind": "function", "doc": "<p>Runs a HERMES energy calculation given a topology, and optionally model and keyword configurations.\nWill use the default model and keywords if none are provided</p>\n\n<p>Module version: <code>tengu-prelude/efc6d8b3a8cc342cd9866d037abb77dac40a4d56</code></p>\n\n<p>QDX Type Description:</p>\n\n<pre><code>complex: @Conformer;\nmodel: {aux_basis: string, basis: string, frag_enabled: bool?, method: RHF | RIMP2}?;\nkeywords: {\n    debug: {\n        dry_run: bool?,\n        n_fragments_to_compute: u32?,\n        print_xyz_coords: bool?,\n        rimp2_print_level: u32?,\n        scf_print_level: u32?,\n        subfragment_xyz_debug: bool?\n    },\n    export: {\n        coefficient_export: bool?,\n        density_export: bool?,\n        export_excludes_hydrogen_caps: bool?,\n        gradient_export: bool?,\n        monolithic_density_export: bool?,\n        monolithic_gradient_export: bool?,\n        orbital_rotation_export: bool?,\n        overlap_export: bool?\n    },\n    frag: {\n        cap_to_empirical_bond_lengths: bool?,\n        dimer_cutoff: u32?,\n        dimer_mp2_cutoff: u32?,\n        fragmentation_level: u8,\n        fragmented_energy_type: TotalEnergy | InteractivityEnergy,\n        method: string,\n        monomer_cutoff: u32?,\n        monomer_mp2_cutoff: u32?,\n        ngpus_per_node: u32,\n        reference_fragment: u32?,\n        subset_of_fragments_to_calculate: [u32]?,\n        trimer_cutoff: u32?,\n        trimer_mp2_cutoff: u32?\n    },\n    guess: {\n        basis_set_projection: bool?,\n        basis_set_projection_bootstrap_basis: bool?,\n        basis_set_projection_scf_keywords: {\n            convergence_metric: string,\n            dynamic_screening_threshold_exp: u32,\n            ndiis: u32,\n            niter: u32,\n            qnext: bool?,\n            rihf: bool?,\n            scf_conv: f64\n        }?,\n        superposition_monomer_densities: bool?,\n        superposition_subfragment_densities: bool?,\n        superposition_subfragment_densities_scf_keywords: {\n            convergence_metric: string,\n            dynamic_screening_threshold_exp: u32,\n            ndiis: u32,\n            niter: u32,\n            qnext: bool?,\n            rihf: bool?,\n            scf_conv: f64\n        }?,\n        superposition_subfragment_densities_target_size: u32?\n    },\n    scf: {\n        convergence_metric: string,\n        dynamic_screening_threshold_exp: u32,\n        ndiis: u32,\n        niter: u32,\n        qnext: bool?,\n        rihf: bool?,\n        scf_conv: f64\n    }\n}?\n-&gt;\nenergy_complex: @{\n    dimer_energies: DimerEnergies?,\n    energy: Energy,\n    fragment_basis_functions: [{\n        n_occupied_basis_functions: u32,\n        n_virtual_basis_functions: u32,\n        total_n_basis_functions: u32\n    }]?,\n    full_system_basis_functions: {\n        n_occupied_basis_functions: u32,\n        n_virtual_basis_functions: u32,\n        total_n_basis_functions: u32\n    }?,\n    monomer_energies: MonomerEnergies?,\n    trimer_energies: TrimerEnergies?\n};\nenergy_protein: @{\n    dimer_energies: DimerEnergies?,\n    energy: Energy,\n    fragment_basis_functions: [{\n        n_occupied_basis_functions: u32,\n        n_virtual_basis_functions: u32,\n        total_n_basis_functions: u32\n    }]?,\n    full_system_basis_functions: {\n        n_occupied_basis_functions: u32,\n        n_virtual_basis_functions: u32,\n        total_n_basis_functions: u32\n    }?,\n    monomer_energies: MonomerEnergies?,\n    trimer_energies: TrimerEnergies?\n}\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>complex</strong>:  Complex conformer with topology</li>\n<li><strong>model</strong>:  Optional Model configuration</li>\n<li><strong>keywords</strong>:  Optional Keywords configuration</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>complex energy results</p>\n</blockquote>\n\n<h6 id=\"returns-2\">Returns</h6>\n\n<blockquote>\n  <p>protein energy results</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t*args: [&lt;class &#x27;pathlib.Path&#x27;&gt;, typing.Optional[~T], typing.Optional[~T]],</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceTarget</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ModuleInstanceTarget</span><span class=\"o\">.</span><span class=\"n\">NIX_SSH_3_GPU</span><span class=\"p\">:</span> <span class=\"s1\">&#39;NIX_SSH_3_GPU&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">input_types</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceResourcesInput</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"n\">ModuleInstanceResourcesInput</span><span class=\"p\">(</span><span class=\"n\">gpus</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">cpus</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">nodes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage</span><span class=\"o\">=</span><span class=\"mi\">1034</span><span class=\"p\">,</span> <span class=\"n\">storage_units</span><span class=\"o\">=&lt;</span><span class=\"n\">MemUnits</span><span class=\"o\">.</span><span class=\"n\">MB</span><span class=\"p\">:</span> <span class=\"s1\">&#39;MB&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">walltime</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage_mounts</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">restore</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> [&lt;class &#x27;pathlib.Path&#x27;&gt;, &lt;class &#x27;pathlib.Path&#x27;&gt;]:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.fragment_aa", "modulename": "rush.doc", "qualname": "RushProvider.fragment_aa", "kind": "function", "doc": "<p>Fragments and infers formal charges for a protein QDX file by cutting the backbone at the alpha-beta carbon bonds every n steps, with more accurate amino-acid based bond perception</p>\n\n<p>Module version: <code>tengu-prelude/efc6d8b3a8cc342cd9866d037abb77dac40a4d56</code></p>\n\n<p>QDX Type Description:</p>\n\n<pre><code>input: @Conformer;\nsteps: u8;\nstrictness: None | Heavy | All\n-&gt;\noutput: @Conformer\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input</strong>:  QDX Conformer file</li>\n<li><strong>steps</strong>:  number of steps to skip between each fragment</li>\n<li><strong>strictness</strong>:  strictness of atom checking - recommended to use All</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>QDX conformer file</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t*args: [&lt;class &#x27;pathlib.Path&#x27;&gt;, &lt;class &#x27;int&#x27;&gt;, list[typing.Union[str, ~T]]],</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceTarget</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ModuleInstanceTarget</span><span class=\"o\">.</span><span class=\"n\">NIX</span><span class=\"p\">:</span> <span class=\"s1\">&#39;NIX&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">input_types</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceResourcesInput</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"n\">ModuleInstanceResourcesInput</span><span class=\"p\">(</span><span class=\"n\">gpus</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">cpus</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">nodes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">storage_units</span><span class=\"o\">=&lt;</span><span class=\"n\">MemUnits</span><span class=\"o\">.</span><span class=\"n\">MB</span><span class=\"p\">:</span> <span class=\"s1\">&#39;MB&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">walltime</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage_mounts</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">restore</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> [&lt;class &#x27;pathlib.Path&#x27;&gt;]:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.fragment", "modulename": "rush.doc", "qualname": "RushProvider.fragment", "kind": "function", "doc": "<p>Fragments a protein QDX file by cutting the backbone at the alpha-beta carbon bonds, skipping each n steps to increase fragment size</p>\n\n<p>Module version: <code>tengu-prelude/efc6d8b3a8cc342cd9866d037abb77dac40a4d56</code></p>\n\n<p>QDX Type Description:</p>\n\n<pre><code>input: @Conformer;\nsteps: u8;\ntolerance: f32?\n-&gt;\noutput: @Conformer\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input</strong>:  QDX Conformer file</li>\n<li><strong>steps</strong>:  number of steps to skip between each fragment</li>\n<li><strong>tolerance</strong>:  tolerance beyond experimental bond lengths to consider a bond present</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>QDX conformer file</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t*args: [&lt;class &#x27;pathlib.Path&#x27;&gt;, &lt;class &#x27;int&#x27;&gt;, typing.Optional[~T]],</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceTarget</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ModuleInstanceTarget</span><span class=\"o\">.</span><span class=\"n\">NIX</span><span class=\"p\">:</span> <span class=\"s1\">&#39;NIX&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">input_types</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceResourcesInput</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"n\">ModuleInstanceResourcesInput</span><span class=\"p\">(</span><span class=\"n\">gpus</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">cpus</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">nodes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">storage_units</span><span class=\"o\">=&lt;</span><span class=\"n\">MemUnits</span><span class=\"o\">.</span><span class=\"n\">MB</span><span class=\"p\">:</span> <span class=\"s1\">&#39;MB&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">walltime</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage_mounts</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">restore</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> [&lt;class &#x27;pathlib.Path&#x27;&gt;]:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.convert", "modulename": "rush.doc", "qualname": "RushProvider.convert", "kind": "function", "doc": "<p>Convert biomolecular and chemical file formats to the QDX file format. Supports PDB and SDF</p>\n\n<p>Module version: <code>tengu-prelude/efc6d8b3a8cc342cd9866d037abb77dac40a4d56</code></p>\n\n<p>QDX Type Description:</p>\n\n<pre><code>format: PDB | SDF;\ninput: @bytes\n-&gt;\noutput: @[Conformer]\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>format</strong>:  the format of the input file</li>\n<li><strong>input</strong>:  the input file</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the output conformers</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t*args: [list[typing.Union[str, ~T]], &lt;class &#x27;pathlib.Path&#x27;&gt;],</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceTarget</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ModuleInstanceTarget</span><span class=\"o\">.</span><span class=\"n\">NIX</span><span class=\"p\">:</span> <span class=\"s1\">&#39;NIX&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">input_types</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceResourcesInput</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"n\">ModuleInstanceResourcesInput</span><span class=\"p\">(</span><span class=\"n\">gpus</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">cpus</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">nodes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">storage_units</span><span class=\"o\">=&lt;</span><span class=\"n\">MemUnits</span><span class=\"o\">.</span><span class=\"n\">MB</span><span class=\"p\">:</span> <span class=\"s1\">&#39;MB&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">walltime</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage_mounts</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">restore</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> [&lt;class &#x27;pathlib.Path&#x27;&gt;]:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.concat", "modulename": "rush.doc", "qualname": "RushProvider.concat", "kind": "function", "doc": "<p>Concatenate two QDX files</p>\n\n<p>Module version: <code>tengu-prelude/efc6d8b3a8cc342cd9866d037abb77dac40a4d56</code></p>\n\n<p>QDX Type Description:</p>\n\n<pre><code>in: @Conformer;\nin: @Conformer\n-&gt;\nout: @Conformer\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t*args: [&lt;class &#x27;pathlib.Path&#x27;&gt;, &lt;class &#x27;pathlib.Path&#x27;&gt;],</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceTarget</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ModuleInstanceTarget</span><span class=\"o\">.</span><span class=\"n\">NIX</span><span class=\"p\">:</span> <span class=\"s1\">&#39;NIX&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">input_types</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceResourcesInput</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"n\">ModuleInstanceResourcesInput</span><span class=\"p\">(</span><span class=\"n\">gpus</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">cpus</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">nodes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">storage_units</span><span class=\"o\">=&lt;</span><span class=\"n\">MemUnits</span><span class=\"o\">.</span><span class=\"n\">MB</span><span class=\"p\">:</span> <span class=\"s1\">&#39;MB&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">walltime</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage_mounts</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">restore</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> [&lt;class &#x27;pathlib.Path&#x27;&gt;]:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.auto3d", "modulename": "rush.doc", "qualname": "RushProvider.auto3d", "kind": "function", "doc": "<p>Generate 3D conformers from SMILES strings and other inputs</p>\n\n<p>Module version: <code>tengu-auto3d/f5f26308f74bde570c870ff0b5bb1be42ac9c712</code></p>\n\n<p>QDX Type Description:</p>\n\n<pre><code>molecule_file: @bytes;\nmolecule_file_type: string;\noptions: {\n    capacity: u32?,\n    convergence_threshold: f32?,\n    enumerate_isomer: bool?,\n    enumerate_tautomer: bool?,\n    gpu_idx: [u32]?,\n    job_name: string?,\n    k: i32?,\n    max_confs: u32?,\n    memory: u32?,\n    mpi_np: u32?,\n    opt_steps: u32?,\n    optimizing_engine: ANI2x | ANI2xt | AIMNET?,\n    patience: u32?,\n    threshold: f32?,\n    use_gpu: bool?,\n    verbose: bool?,\n    window: f32?\n}\n-&gt;\nconformer_sdf: @bytes;\nconformers: @[Conformer]\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>molecule_file: The input molecules as a file</strong>:  either one SMILES string per line, or an SDF</li>\n<li><strong>molecule_file_type</strong>:  The string 'smi' or 'sdf', depending on the input type</li>\n<li><strong>options</strong>:  A dict with options to pass; see auto3d docs for details</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A sdf file containing the ligand(s)'s conformers</p>\n</blockquote>\n\n<h6 id=\"returns-2\">Returns</h6>\n\n<blockquote>\n  <p>A vec of qdxf conformers</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t*args: [&lt;class &#x27;pathlib.Path&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;, dict[str, ~T]],</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceTarget</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ModuleInstanceTarget</span><span class=\"o\">.</span><span class=\"n\">NIX_SSH_2</span><span class=\"p\">:</span> <span class=\"s1\">&#39;NIX_SSH_2&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">input_types</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceResourcesInput</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"n\">ModuleInstanceResourcesInput</span><span class=\"p\">(</span><span class=\"n\">gpus</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">cpus</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">nodes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage</span><span class=\"o\">=</span><span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"n\">storage_units</span><span class=\"o\">=&lt;</span><span class=\"n\">MemUnits</span><span class=\"o\">.</span><span class=\"n\">MB</span><span class=\"p\">:</span> <span class=\"s1\">&#39;MB&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">walltime</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage_mounts</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">restore</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> [&lt;class &#x27;pathlib.Path&#x27;&gt;, &lt;class &#x27;pathlib.Path&#x27;&gt;]:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.dubai", "modulename": "rush.doc", "qualname": "RushProvider.dubai", "kind": "function", "doc": "<p>Perform quantum accurate bond inference and partial charge calculation on a Conformer</p>\n\n<p>Module version: <code>Dubai/d013073e0774326e903e6abaca4c1871d4950e70</code></p>\n\n<p>QDX Type Description:</p>\n\n<pre><code>input: @Conformer\n-&gt;\noutput: @Conformer\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input</strong>:  A Conformer. The Conformer's Topology requires fragment charges and fragment charge multiplicities</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Output Conformer including partial charges and bond recalculation</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t*args: [&lt;class &#x27;pathlib.Path&#x27;&gt;],</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceTarget</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ModuleInstanceTarget</span><span class=\"o\">.</span><span class=\"n\">NIX_SSH_3_GPU</span><span class=\"p\">:</span> <span class=\"s1\">&#39;NIX_SSH_3_GPU&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">input_types</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceResourcesInput</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"n\">ModuleInstanceResourcesInput</span><span class=\"p\">(</span><span class=\"n\">gpus</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">cpus</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">nodes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">storage_units</span><span class=\"o\">=&lt;</span><span class=\"n\">MemUnits</span><span class=\"o\">.</span><span class=\"n\">MB</span><span class=\"p\">:</span> <span class=\"s1\">&#39;MB&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">walltime</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage_mounts</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">restore</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> [&lt;class &#x27;pathlib.Path&#x27;&gt;]:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.gmx_mmpbsa", "modulename": "rush.doc", "qualname": "RushProvider.gmx_mmpbsa", "kind": "function", "doc": "<p>Run gmx mmpbsa on the outputs of a gmx simulation </p>\n\n<p>Module version: <code>gmx_tengu_support/6bd881c6bb32ac85ab9cb9c95d2b16676cc72b7a</code></p>\n\n<p>QDX Type Description:</p>\n\n<pre><code>tpr_tar_gz: @bytes;\ndry_xtc_tar_gz: @bytes;\nindex_file: @bytes;\ntopol_file: @bytes;\nmmpbsa_config: {\n    end_frame: u64,\n    ie_segment: u32?,\n    interaction_entropy: bool?,\n    interval: u32?,\n    num_cpus: u32,\n    start_frame: u64,\n    with_gb: bool?\n}\n-&gt;\noutput: @bytes\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tpr_tar_gz</strong>:  Compressed GROMACS output folder</li>\n<li><strong>dry_xtc_tar_gz</strong>:  Compressed GROMACS output folder</li>\n<li><strong>index_file</strong>:  Compressed GROMACS output folder</li>\n<li><strong>topol_file</strong>:  Compressed GROMACS output folder</li>\n<li><strong>mmpbsa_config: Configuration record for mmpbsa</strong>: \nstart_frame: Frame to start with\nend_frame: Frame to end with\nnum_cpus: Number of CPUs to use - cannot be larger than the number of frames\ninteraction_entropy: Calculate interaction entropy</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Compressed mmpbsa output folder</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t*args: [&lt;class &#x27;pathlib.Path&#x27;&gt;, &lt;class &#x27;pathlib.Path&#x27;&gt;, &lt;class &#x27;pathlib.Path&#x27;&gt;, &lt;class &#x27;pathlib.Path&#x27;&gt;, dict[str, ~T]],</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceTarget</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ModuleInstanceTarget</span><span class=\"o\">.</span><span class=\"n\">NIX_SSH_3</span><span class=\"p\">:</span> <span class=\"s1\">&#39;NIX_SSH_3&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">input_types</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceResourcesInput</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"n\">ModuleInstanceResourcesInput</span><span class=\"p\">(</span><span class=\"n\">gpus</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">cpus</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">nodes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">storage_units</span><span class=\"o\">=&lt;</span><span class=\"n\">MemUnits</span><span class=\"o\">.</span><span class=\"n\">MB</span><span class=\"p\">:</span> <span class=\"s1\">&#39;MB&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">walltime</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage_mounts</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">restore</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> [&lt;class &#x27;pathlib.Path&#x27;&gt;]:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.gmx_frame_select_pdb", "modulename": "rush.doc", "qualname": "RushProvider.gmx_frame_select_pdb", "kind": "function", "doc": "<p>Extract frames selected by gmx_tengu_support/__main__ as zipped pdb files.</p>\n\n<p>Module version: <code>gmx_tengu_support/6bd881c6bb32ac85ab9cb9c95d2b16676cc72b7a</code></p>\n\n<p>QDX Type Description:</p>\n\n<pre><code>md_outputs.tar.gz: @bytes;\nframe_selection_config: {end_frame: u32, interval: u32, start_frame: u32}\n-&gt;\nframes: @bytes;\ngro: @bytes\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>md_outputs.tar.gz</strong>:  Zipped file containing the dry trajectory of a GROMACS MD simulation, specifically containing the files '/md.<em>.dry.xtc' and '</em>.dry.gro'</li>\n<li><strong>frame_selection_config: Configuration for frame selection</strong>: \nframe_selection: list of frame indices in to select from trajectory</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Zipped pdb files</p>\n</blockquote>\n\n<h6 id=\"returns-2\">Returns</h6>\n\n<blockquote>\n  <p>gro file of ligand</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t*args: [&lt;class &#x27;pathlib.Path&#x27;&gt;, dict[str, ~T]],</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceTarget</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ModuleInstanceTarget</span><span class=\"o\">.</span><span class=\"n\">GADI</span><span class=\"p\">:</span> <span class=\"s1\">&#39;GADI&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">input_types</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceResourcesInput</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"n\">ModuleInstanceResourcesInput</span><span class=\"p\">(</span><span class=\"n\">gpus</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">cpus</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">nodes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">storage_units</span><span class=\"o\">=&lt;</span><span class=\"n\">MemUnits</span><span class=\"o\">.</span><span class=\"n\">MB</span><span class=\"p\">:</span> <span class=\"s1\">&#39;MB&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">walltime</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage_mounts</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">restore</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> [&lt;class &#x27;pathlib.Path&#x27;&gt;, &lt;class &#x27;pathlib.Path&#x27;&gt;]:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.gmx_frame_select", "modulename": "rush.doc", "qualname": "RushProvider.gmx_frame_select", "kind": "function", "doc": "<p>Extract frames selected by gmx_tengu_support/__main__ as conformers (qdxf).</p>\n\n<p>Module version: <code>gmx_tengu_support/6bd881c6bb32ac85ab9cb9c95d2b16676cc72b7a</code></p>\n\n<p>QDX Type Description:</p>\n\n<pre><code>md_outputs.tar.gz: @bytes;\nframe_selection_config: {end_frame: u32, interval: u32, start_frame: u32}\n-&gt;\nconformers: @[Conformer]\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>md_outputs.tar.gz</strong>:  Zipped file containing the dry trajectory of a GROMACS MD simulation,\nspecifically containing the files '/md.<em>.dry.xtc' and '</em>.dry.gro'</li>\n<li><strong>frame_selection_config: Configuration for frame selection</strong>: \nframe_selection: list of frame indices in to select from trajectory</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>selected frames as conformers</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t*args: [&lt;class &#x27;pathlib.Path&#x27;&gt;, dict[str, ~T]],</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceTarget</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ModuleInstanceTarget</span><span class=\"o\">.</span><span class=\"n\">GADI</span><span class=\"p\">:</span> <span class=\"s1\">&#39;GADI&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">input_types</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceResourcesInput</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"n\">ModuleInstanceResourcesInput</span><span class=\"p\">(</span><span class=\"n\">gpus</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">cpus</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">nodes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">storage_units</span><span class=\"o\">=&lt;</span><span class=\"n\">MemUnits</span><span class=\"o\">.</span><span class=\"n\">MB</span><span class=\"p\">:</span> <span class=\"s1\">&#39;MB&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">walltime</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage_mounts</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">restore</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> [&lt;class &#x27;pathlib.Path&#x27;&gt;]:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.rxdock", "modulename": "rush.doc", "qualname": "RushProvider.rxdock", "kind": "function", "doc": "<p>Run rxdock with protein, ligand, and parameter file</p>\n\n<p>Module version: <code>tengu-rxdock/5e2e5b18995f3730e5f77cd4c90b593e862ca974</code></p>\n\n<p>QDX Type Description:</p>\n\n<pre><code>protein_qdxf: @Conformer?;\nligand_qdxf: @Conformer?;\noptions: {min_volume: f32?, n_runs: u32?, radius: f32?, small_sphere: f32?};\npharmacophore_restraints: @bytes?;\nprotein_pdb_file: @bytes?;\nligand_sdf_file: @bytes?\n-&gt;\nconformers_qdxf: @[Conformer];\npose_scores: @[{\n    score: f32,\n    score_inter: f32,\n    score_inter_norm: f32,\n    score_inter_polar: f32,\n    score_inter_vdw: f32,\n    score_intra: f32,\n    score_intra_dihedral: f32,\n    score_intra_norm: f32,\n    score_intra_vdw: f32,\n    score_norm: f32\n}];\nconformer_sdf_file: @bytes\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>protein_qdxf</strong>:  The protein to use as the docking receptor in qdxf Conformer format</li>\n<li><strong>ligand_qdxf</strong>:  The ligand to dock into the receptor in qdxf Conformer format</li>\n<li><strong>options</strong>:  A dict with options to pass; keys are n_runs, radius, min_volume, small_sphere</li>\n<li><strong>pharmacophore_restraints</strong>:  [Optional] A file with pharmacophore restraints in it; check rdock docs for details</li>\n<li><strong>protein_pdb_file</strong>:  [Alternate] If no complex_qdxf passed, the protein to use as the docking receptor in PDB format</li>\n<li><strong>ligand_sdf_file</strong>:  [Alternate] If no complex_qdxf passed, the ligand to dock into the receptor in SDF format</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A vec of qdxf Conformers of the ligand's docked poses, up to 10 and sorted by docking score</p>\n</blockquote>\n\n<h6 id=\"returns-2\">Returns</h6>\n\n<blockquote>\n  <p>A vec of RxdockScore objects containing the various pose score data for each pose, respectively</p>\n</blockquote>\n\n<h6 id=\"returns-3\">Returns</h6>\n\n<blockquote>\n  <p>An sdf file of the ligand's docked poses, up to 10 and sorted by docking score</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceTarget</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ModuleInstanceTarget</span><span class=\"o\">.</span><span class=\"n\">NIX_SSH_3</span><span class=\"p\">:</span> <span class=\"s1\">&#39;NIX_SSH_3&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">input_types</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceResourcesInput</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"n\">ModuleInstanceResourcesInput</span><span class=\"p\">(</span><span class=\"n\">gpus</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">cpus</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">nodes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage</span><span class=\"o\">=</span><span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"n\">storage_units</span><span class=\"o\">=&lt;</span><span class=\"n\">MemUnits</span><span class=\"o\">.</span><span class=\"n\">MB</span><span class=\"p\">:</span> <span class=\"s1\">&#39;MB&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">walltime</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage_mounts</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">restore</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> [&lt;class &#x27;pathlib.Path&#x27;&gt;, &lt;class &#x27;pathlib.Path&#x27;&gt;, &lt;class &#x27;pathlib.Path&#x27;&gt;]:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.prepare_ligand", "modulename": "rush.doc", "qualname": "RushProvider.prepare_ligand", "kind": "function", "doc": "<p>Prepare ligand for sim. or quantum energy calc. using gypsum_dl</p>\n\n<p>Module version: <code>gypsum_dl/04acd1852cb3e2c8d0347e15763926fdf9a93a5d</code></p>\n\n<p>QDX Type Description:</p>\n\n<pre><code>in: string;\nin: @bytes;\nin: {\n    job_manager: string,\n    let_tautomers_change_chirality: bool,\n    max_ph: f32,\n    max_variants_per_compound: i32,\n    min_ph: f32,\n    num_processors: i32,\n    output_folder: string,\n    pka_precision: f32,\n    separate_output_files: bool,\n    skip_adding_hydrogen: bool,\n    skip_alternate_ring_conformations: bool,\n    skip_enumerate_chiral_mol: bool,\n    skip_enumerate_double_bonds: bool,\n    skip_making_tautomers: bool,\n    skip_optimize_geometry: bool,\n    source: string,\n    thoroughness: i32,\n    use_durrant_lab_filters: bool\n}\n-&gt;\nout: @bytes;\nout: @bytes\n</code></pre>\n\n<p>Prepare ligand for sim. or quantum energy calc. using gypsum_dl.</p>\n\n<p>Inputs:\n    - An input molecule as a SMILES string\n    - The same input molecule as a PDB file\n    - A json file representing any other options to pass; see gypsum_dl docs for details</p>\n\n<p>Outputs:\n    - A pdb file containing the prepared version of the molecule, ready for downstream use</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t*args: [&lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;pathlib.Path&#x27;&gt;, dict[str, ~T]],</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceTarget</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ModuleInstanceTarget</span><span class=\"o\">.</span><span class=\"n\">NIX_SSH_3</span><span class=\"p\">:</span> <span class=\"s1\">&#39;NIX_SSH_3&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">input_types</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceResourcesInput</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"n\">ModuleInstanceResourcesInput</span><span class=\"p\">(</span><span class=\"n\">gpus</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">cpus</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">nodes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage</span><span class=\"o\">=</span><span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"n\">storage_units</span><span class=\"o\">=&lt;</span><span class=\"n\">MemUnits</span><span class=\"o\">.</span><span class=\"n\">MB</span><span class=\"p\">:</span> <span class=\"s1\">&#39;MB&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">walltime</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage_mounts</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">restore</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> [&lt;class &#x27;pathlib.Path&#x27;&gt;, &lt;class &#x27;pathlib.Path&#x27;&gt;]:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.plip", "modulename": "rush.doc", "qualname": "RushProvider.plip", "kind": "function", "doc": "<p>Run PLIP on the input PDB file of a protein-ligand complex to obtain interaction data.</p>\n\n<p>Module version: <code>tengu-plip/9a4ff5b9e5fe77f37505c4718d0d63182885c805</code></p>\n\n<p>QDX Type Description:</p>\n\n<pre><code>input_complex_pdb_file: @bytes\n-&gt;\noutput_conformer: @Conformer;\noutput_txt_file: @bytes\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_complex_pdb_file</strong>:  The protein-ligand complex as a PDB file; ligand should be the only HETATM lines.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A QDX Conformer of the complex with the computed interaction data</p>\n</blockquote>\n\n<h6 id=\"returns-2\">Returns</h6>\n\n<blockquote>\n  <p>The output txt report from the PLIP run</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t*args: [&lt;class &#x27;pathlib.Path&#x27;&gt;],</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceTarget</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ModuleInstanceTarget</span><span class=\"o\">.</span><span class=\"n\">NIX_SSH</span><span class=\"p\">:</span> <span class=\"s1\">&#39;NIX_SSH&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">input_types</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceResourcesInput</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"n\">ModuleInstanceResourcesInput</span><span class=\"p\">(</span><span class=\"n\">gpus</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">cpus</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">nodes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage</span><span class=\"o\">=</span><span class=\"mi\">138</span><span class=\"p\">,</span> <span class=\"n\">storage_units</span><span class=\"o\">=&lt;</span><span class=\"n\">MemUnits</span><span class=\"o\">.</span><span class=\"n\">MB</span><span class=\"p\">:</span> <span class=\"s1\">&#39;MB&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">walltime</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage_mounts</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">restore</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> [&lt;class &#x27;pathlib.Path&#x27;&gt;, &lt;class &#x27;pathlib.Path&#x27;&gt;]:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.gmx_pdb", "modulename": "rush.doc", "qualname": "RushProvider.gmx_pdb", "kind": "function", "doc": "<p>Runs a molecular dynamics simluation using GROMACS from protein and ligand pdbs as inputs</p>\n\n<p>Module version: <code>gmx_tengu_support/5630231b47abff0bdd767241a9c8ef60e6192d8e</code></p>\n\n<p>QDX Type Description:</p>\n\n<pre><code>protein: @bytes;\nligand: @bytes?;\ngmx-config: {\n    frame_sel: {end_frame: u32, interval: u32, start_frame: u32}?,\n    ligand_charge: i8?,\n    num_gpus: u8,\n    num_replicas: u8?,\n    param_overrides: {\n        em: [(string, string)],\n        ions: [(string, string)],\n        md: [(string, string)],\n        npt: [(string, string)],\n        nvt: [(string, string)]\n    }\n}\n-&gt;\nouput_folder: @bytes;\ndry_frames: @bytes;\nwet_frames: @bytes;\nlig_gro: @bytes?;\nxtcs: @bytes\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>protein</strong>:  Protein PDB file</li>\n<li><strong>ligand</strong>:  Ligand PDB file</li>\n<li><strong>gmx-config</strong>:  Configuration record</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>tar.gz Compressed full GROMACS output folder, containing dry.xtc, dry frames, wet frames, gro of ligand etc.</p>\n</blockquote>\n\n<h6 id=\"returns-2\">Returns</h6>\n\n<blockquote>\n  <p>tar.gz of dry pdb frames</p>\n</blockquote>\n\n<h6 id=\"returns-3\">Returns</h6>\n\n<blockquote>\n  <p>tar.gz of wet pdb frames</p>\n</blockquote>\n\n<h6 id=\"returns-4\">Returns</h6>\n\n<blockquote>\n  <p>tar.gz of ligand gro</p>\n</blockquote>\n\n<h6 id=\"returns-5\">Returns</h6>\n\n<blockquote>\n  <p>tar.gz of xtc files</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t*args: [&lt;class &#x27;pathlib.Path&#x27;&gt;, typing.Optional[~T], dict[str, ~T]],</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceTarget</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ModuleInstanceTarget</span><span class=\"o\">.</span><span class=\"n\">GADI_GPU</span><span class=\"p\">:</span> <span class=\"s1\">&#39;GADI_GPU&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">input_types</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceResourcesInput</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"n\">ModuleInstanceResourcesInput</span><span class=\"p\">(</span><span class=\"n\">gpus</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">cpus</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">nodes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage</span><span class=\"o\">=</span><span class=\"mi\">1034</span><span class=\"p\">,</span> <span class=\"n\">storage_units</span><span class=\"o\">=&lt;</span><span class=\"n\">MemUnits</span><span class=\"o\">.</span><span class=\"n\">MB</span><span class=\"p\">:</span> <span class=\"s1\">&#39;MB&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">walltime</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage_mounts</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">restore</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> [&lt;class &#x27;pathlib.Path&#x27;&gt;, &lt;class &#x27;pathlib.Path&#x27;&gt;, &lt;class &#x27;pathlib.Path&#x27;&gt;, typing.Optional[~T], &lt;class &#x27;pathlib.Path&#x27;&gt;]:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.gnina_pdb", "modulename": "rush.doc", "qualname": "RushProvider.gnina_pdb", "kind": "function", "doc": "<p>Run docking of small molecules to proteins with gnina</p>\n\n<p>Module version: <code>tengu-gnina/6f97cbd5df44535f439a9f94bb3af3d5d72c933c</code></p>\n\n<p>QDX Type Description:</p>\n\n<pre><code>protein.pdb: @bytes;\nligands.sdf: @bytes;\nref_ligand.sdf: @bytes;\ngnina_options: {\n    autobox: f32?,\n    docking_site: {\n        center_x: f32,\n        center_y: f32,\n        center_z: f32,\n        size_x: f32,\n        size_y: f32,\n        size_z: f32\n    }?,\n    exhaustiveness: u32,\n    minimise: bool,\n    num_modes: u32\n}\n-&gt;\ndocked_ligands_sdf: @bytes;\nscores: [{affinity: f32, cnn_affinity: f32, cnn_score: f32, mode: i32}]\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>protein.pdb</strong>:  protein pdb file</li>\n<li><strong>ligands.sdf</strong>:  ligands sdf file</li>\n<li><strong>ref_ligand.sdf</strong>:  ligand to use as the reference for docking site</li>\n<li><strong>gnina_options</strong>:  Alternate module entrypoint to run Gnina directly with a protein PDB and ligand SDF.\nEither a reference ligand could be used to demarcate the binding site or xyz coordinates of the\nbinding site and its size in the xyz direction in terms of Angstroms will be used.\nThe binding site information can be specified in the GninaOptions as well.</li>\n</ul>\n\n<p>Within the GninaOptions:\n    - The exhaustiveness would determine the search extent for the docking algorithm.\n    - The num_modes would determine the number of dock poses to report.\n    - The minimise argument would determine whether to minimise the energy of the final pose.\n    - The docking_site would be for specifying where to dock the ligand to.</p>\n\n<p>Outputs:\n    - A sdf file containing the docked ligands with the docking scores as sdf attributes\n    - A flat vector of gnina scores for each ligand (should map 1:1 with the sdf file)</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dock poses sdf file</p>\n</blockquote>\n\n<h6 id=\"returns-2\">Returns</h6>\n\n<blockquote>\n  <p>gnina scores for each ligand</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t*args: [&lt;class &#x27;pathlib.Path&#x27;&gt;, &lt;class &#x27;pathlib.Path&#x27;&gt;, &lt;class &#x27;pathlib.Path&#x27;&gt;, dict[str, ~T]],</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceTarget</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ModuleInstanceTarget</span><span class=\"o\">.</span><span class=\"n\">NIX_SSH_3</span><span class=\"p\">:</span> <span class=\"s1\">&#39;NIX_SSH_3&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">input_types</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceResourcesInput</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"n\">ModuleInstanceResourcesInput</span><span class=\"p\">(</span><span class=\"n\">gpus</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">cpus</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">nodes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage</span><span class=\"o\">=</span><span class=\"mi\">1034</span><span class=\"p\">,</span> <span class=\"n\">storage_units</span><span class=\"o\">=&lt;</span><span class=\"n\">MemUnits</span><span class=\"o\">.</span><span class=\"n\">MB</span><span class=\"p\">:</span> <span class=\"s1\">&#39;MB&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">walltime</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage_mounts</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">restore</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> [&lt;class &#x27;pathlib.Path&#x27;&gt;, list[~T]]:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.gmx_em", "modulename": "rush.doc", "qualname": "RushProvider.gmx_em", "kind": "function", "doc": "<p>Updates the geometry of a conformer runnning GROMACS's energy minimization in solvent</p>\n\n<p>Module version: <code>gmx_tengu_support/1c8beb04620306f99157bf700964dd2c476578a7</code></p>\n\n<p>QDX Type Description:</p>\n\n<pre><code>protein-ligand-conformer: @Conformer;\ngmx-config: {\n    frame_sel: {end_frame: u32, interval: u32, start_frame: u32}?,\n    ligand_charge: i8?,\n    num_gpus: u8,\n    num_replicas: u8?,\n    param_overrides: {\n        em: [(string, string)],\n        ions: [(string, string)],\n        md: [(string, string)],\n        npt: [(string, string)],\n        nvt: [(string, string)]\n    }\n}\n-&gt;\nconformer: @Conformer\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>protein-ligand-conformer</strong>:  ensure that both amino-acids and residues are non-zeroes, otherwise GROMACS will panic</li>\n<li><strong>gmx-config</strong>:  Configuration record</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Conformer with updated geometry</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t*args: [&lt;class &#x27;pathlib.Path&#x27;&gt;, dict[str, ~T]],</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceTarget</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ModuleInstanceTarget</span><span class=\"o\">.</span><span class=\"n\">NIX_SSH_3</span><span class=\"p\">:</span> <span class=\"s1\">&#39;NIX_SSH_3&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">input_types</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceResourcesInput</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"n\">ModuleInstanceResourcesInput</span><span class=\"p\">(</span><span class=\"n\">gpus</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">gpu_mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">cpus</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">nodes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mem_units</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage</span><span class=\"o\">=</span><span class=\"mi\">1034</span><span class=\"p\">,</span> <span class=\"n\">storage_units</span><span class=\"o\">=&lt;</span><span class=\"n\">MemUnits</span><span class=\"o\">.</span><span class=\"n\">MB</span><span class=\"p\">:</span> <span class=\"s1\">&#39;MB&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">walltime</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">storage_mounts</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">restore</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> [&lt;class &#x27;pathlib.Path&#x27;&gt;]:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.proton", "modulename": "rush.doc", "qualname": "RushProvider.proton", "kind": "function", "doc": "<p>Compute the protonation states of a molecule</p>\n\n<p>Module version: <code>proton/3a8c2dfa04787b9b8a0e81dc0188a85f43b80c86</code></p>\n\n<p>QDX Type Description:</p>\n\n<pre><code>input: @Conformer;\nparameters: {\n    max_charge: i8,\n    min_charge: i8,\n    optimisation_type: string,\n    temperature_celsius: f64\n}\n-&gt;\noutput: @(\n    [Conformer],\n    [{\n        charge: i8,\n        hf_energy: f64,\n        intrinsic_hf_energy: f64,\n        solvation_energy: f64,\n        total_energy: f64\n    }]\n)\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input</strong>:  the input conformer</li>\n<li><strong>parameters</strong>:  the parameters for the proton run</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the generated topologies and energies</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t*args: [&lt;class &#x27;pathlib.Path&#x27;&gt;, dict[str, ~T]],</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceTarget</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ModuleInstanceTarget</span><span class=\"o\">.</span><span class=\"n\">NIX_SSH_GPU</span><span class=\"p\">:</span> <span class=\"s1\">&#39;NIX_SSH_GPU&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">input_types</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceResourcesInput</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">restore</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> [&lt;class &#x27;pathlib.Path&#x27;&gt;]:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.conquest", "modulename": "rush.doc", "qualname": "RushProvider.conquest", "kind": "function", "doc": "<p>Run conformer search on small molecules</p>\n\n<p>Module version: <code>CONQUEST-tengu/c668c2c9f364835237f9052ab4721c29a2e0d7ac</code></p>\n\n<p>QDX Type Description:</p>\n\n<pre><code>ligand: @Conformer;\nConquestOptions: {\n    bond_deviation_weight: f32,\n    diversity_weight: f32,\n    energy_evaluation: string,\n    energy_weight: f32,\n    num_conformers: u32\n}\n-&gt;\nconquest_result: @[{energy: f32, ligand_conformer: Conformer}]\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ligand</strong>:  Ligand conformer</li>\n<li><strong>ConquestOptions</strong>: <br />\n<ul>\n<li>Number of conformers to generate</li>\n<li>Diversity weight</li>\n<li>Energy weight</li>\n<li>Bond deviation weight</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of conformers with their energies</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t*args: [&lt;class &#x27;pathlib.Path&#x27;&gt;, dict[str, ~T]],</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceTarget</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ModuleInstanceTarget</span><span class=\"o\">.</span><span class=\"n\">NIX_SSH</span><span class=\"p\">:</span> <span class=\"s1\">&#39;NIX_SSH&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">input_types</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceResourcesInput</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">restore</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> [&lt;class &#x27;pathlib.Path&#x27;&gt;]:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.hermes_setonix", "modulename": "rush.doc", "qualname": "RushProvider.hermes_setonix", "kind": "function", "doc": "<p>Hack to use Josh's setonix hermes build. Runs a HERMES energy calculation given a topology, and optionally model and keyword configurations.\nWill use the default model and keywords if none are provided</p>\n\n<p>Module version: <code>tengu-prelude/7bc3f5ba41d4f4a20baf44eebb22a9f31cea7b41</code></p>\n\n<p>QDX Type Description:</p>\n\n<pre><code>input: @Conformer;\nmodel: {\n    aux_basis: string,\n    basis: string,\n    fragmentation: bool?,\n    method: HF | RIMP2,\n    spin_configuration: Restricted | Unrestricted\n}?;\nkeywords: {\n    debug: {\n        dry_run: bool?,\n        n_fragments_to_compute: u32?,\n        print_gradients: bool?,\n        print_xyz_coords: bool?,\n        rimp2_print_level: u32?,\n        scf_print_level: u32?,\n        subfragment_xyz_debug: bool?\n    },\n    export: {\n        exclude_hydrogen_caps: bool?,\n        export_excludes_hydrogen_caps: bool?,\n    },\n    frag: {\n        cap_to_empirical_bond_lengths: bool?,\n        cutoffs: {dimer: u32?, tetramer: u32?, trimer: u32?},\n        fragmentation_level: Monomer | Dimer | Trimer | Tetramer,\n        fragmented_energy_type: TotalEnergy | InteractivityEnergy,\n        method: string,\n        ngpus_per_node: u32,\n        reference_fragment: u32?,\n        subset_of_fragments_to_calculate: [u32]?\n    },\n    guess: {\n        basis_set_projection: bool?,\n        basis_set_projection_bootstrap_basis: bool?,\n        basis_set_projection_scf_keywords: {\n            convergence_metric: string,\n            density_threshold: f64,\n            dynamic_screening_threshold_exp: u32,\n            ndiis: u32,\n            niter: u32,\n            overlap_eigenvalue_threshold: f64?,\n            qnext: bool?,\n            rihf: bool?,\n            scf_conv: f64\n        }?,\n        converge_subfragment_densities_to_bootstrap_basis: bool?,\n        superposition_monomer_densities: bool?,\n        superposition_subfragment_densities: bool?,\n        superposition_subfragment_densities_scf_keywords: {\n            convergence_metric: string,\n            density_threshold: f64,\n            dynamic_screening_threshold_exp: u32,\n            ndiis: u32,\n            niter: u32,\n            overlap_eigenvalue_threshold: f64?,\n            qnext: bool?,\n            rihf: bool?,\n            scf_conv: f64\n        }?,\n        superposition_subfragment_densities_target_size: u32?\n    },\n    scf: {\n        convergence_metric: string,\n        density_threshold: f64,\n        dynamic_screening_threshold_exp: u32,\n        ndiis: u32,\n        niter: u32,\n        overlap_eigenvalue_threshold: f64?,\n        qnext: bool?,\n        rihf: bool?,\n        scf_conv: f64\n    }\n}?\n-&gt;\nenergy: @{\n    calculation_time: f64,\n    fragmentation_calculation: {\n        all_calculations_converged: bool,\n        distance_between_fragments: [f64?],\n        distance_from_reference_monomer: [f64]?,\n        energy_type: TotalEnergy | InteractivityEnergy,\n        fragment_groups: [[f64]],\n        interactivity_energies: {\n            energy_per_fragment: [f64],\n            hf_energy_per_fragment: [f64],\n            mp2_energy_per_fragment: [f64]?,\n            mp2_os_energy_per_fragment: [f64]?,\n            mp2_ss_energy_per_fragment: [f64]?\n        },\n        total_energies: {\n            energy_per_fragment: [f64],\n            hf_energy_per_fragment: [f64],\n            mp2_energy_per_fragment: [f64]?,\n            mp2_os_energy_per_fragment: [f64]?,\n            mp2_ss_energy_per_fragment: [f64]?\n        },\n        total_energy: f64,\n        total_hf_energy: f64,\n        total_mp2_energy: f64?,\n        total_mp2_os_energy: f64?,\n        total_mp2_ss_energy: f64?,\n        total_scf_iterations: u32\n    }?,\n    individual_calculation: {\n        all_calculations_converged: bool,\n        hf_energy: f64,\n        mp2_energy: f64?,\n        mp2_os_energy: f64?,\n        mp2_ss_energy: f64?,\n        total_energy: f64,\n        total_scf_iterations: u32\n    }?,\n    input_file_path: string\n}\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input</strong>:  Conformer with topology</li>\n<li><strong>model</strong>:  Optional Model configuration</li>\n<li><strong>keywords</strong>:  Optional Keywords configuration</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>energy results</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t*args: [&lt;class &#x27;pathlib.Path&#x27;&gt;, typing.Optional[~T], typing.Optional[~T]],</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceTarget</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ModuleInstanceTarget</span><span class=\"o\">.</span><span class=\"n\">SETONIX</span><span class=\"p\">:</span> <span class=\"s1\">&#39;SETONIX&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">input_types</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceResourcesInput</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">restore</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> [&lt;class &#x27;pathlib.Path&#x27;&gt;]:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.echo", "modulename": "rush.doc", "qualname": "RushProvider.echo", "kind": "function", "doc": "<p>Echo a number of different arguments to a number of output arguments.</p>\n\n<p>Module version: <code>tengu-module-example/b334a851530033b79762c3341bf584f8939feee1</code></p>\n\n<p>QDX Type Description:</p>\n\n<pre><code>u8: u8;\nf32: f32;\nString: string;\nObject: @u8\n-&gt;\nu8: u8;\nf32: f32;\nString: string;\nObject: @u8\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>u8</strong>:  a u8</li>\n<li><strong>f32</strong>:  a f32</li>\n<li><strong>String</strong>:  a String</li>\n<li><strong>Object</strong>:  a u8 object</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>a u8</p>\n</blockquote>\n\n<h6 id=\"returns-2\">Returns</h6>\n\n<blockquote>\n  <p>a f32</p>\n</blockquote>\n\n<h6 id=\"returns-3\">Returns</h6>\n\n<blockquote>\n  <p>a String</p>\n</blockquote>\n\n<h6 id=\"returns-4\">Returns</h6>\n\n<blockquote>\n  <p>a u8 object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t*args: [&lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;pathlib.Path&#x27;&gt;],</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceTarget</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ModuleInstanceTarget</span><span class=\"o\">.</span><span class=\"n\">NIX</span><span class=\"p\">:</span> <span class=\"s1\">&#39;NIX&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">input_types</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceResourcesInput</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">restore</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> [&lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;pathlib.Path&#x27;&gt;]:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.spam", "modulename": "rush.doc", "qualname": "RushProvider.spam", "kind": "function", "doc": "<p>An example module definition that will write \"spam\" to stdout and stderr over a configurable amount of time,\nfor a configurable number of lines.</p>\n\n<p>Module version: <code>tengu-module-example/b334a851530033b79762c3341bf584f8939feee1</code></p>\n\n<p>QDX Type Description:</p>\n\n<pre><code>spam_period: u64;\nspam_count: u64\n-&gt;\nout: u8\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>spam_period</strong>:  the amount of time to wait between each line of spam, in milliseconds</li>\n<li><strong>spam_count</strong>:  the number of lines of spam to write</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t*args: [&lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;int&#x27;&gt;],</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceTarget</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ModuleInstanceTarget</span><span class=\"o\">.</span><span class=\"n\">NIX</span><span class=\"p\">:</span> <span class=\"s1\">&#39;NIX&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">input_types</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceResourcesInput</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">restore</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> [&lt;class &#x27;int&#x27;&gt;]:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.delay", "modulename": "rush.doc", "qualname": "RushProvider.delay", "kind": "function", "doc": "<p>An example module entrypoint that sleeps for a given number of milliseconds.\nOnce per second, it will emit the number of milliseconds that have elapsed.\nIt will also emit the total number of milliseconds that have elapsed once\nthe total delay time has elapsed.</p>\n\n<p>Module version: <code>tengu-module-example/b334a851530033b79762c3341bf584f8939feee1</code></p>\n\n<p>QDX Type Description:</p>\n\n<pre><code>delay: u64\n-&gt;\ndelay: u64\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>delay</strong>:  delay in milliseconds</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>the amount that was delayed</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t*args: [&lt;class &#x27;int&#x27;&gt;],</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceTarget</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ModuleInstanceTarget</span><span class=\"o\">.</span><span class=\"n\">NIX</span><span class=\"p\">:</span> <span class=\"s1\">&#39;NIX&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">input_types</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceResourcesInput</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">restore</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> [&lt;class &#x27;int&#x27;&gt;]:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.gypsum_dl", "modulename": "rush.doc", "qualname": "RushProvider.gypsum_dl", "kind": "function", "doc": "<p>Generate 3D conformers from SMILES strings and other inputs</p>\n\n<p>Module version: <code>gypsum_dl/97f5d845dd68ebe9ccc7d44bb9cc9647f4856f1a</code></p>\n\n<p>QDX Type Description:</p>\n\n<pre><code>in: @bytes;\nin: string;\nin: {\n    job_manager: string,\n    let_tautomers_change_chirality: bool,\n    max_ph: f32,\n    max_variants_per_compound: i32,\n    min_ph: f32,\n    num_processors: i32,\n    output_folder: string,\n    pka_precision: f32,\n    separate_output_files: bool,\n    skip_adding_hydrogen: bool,\n    skip_alternate_ring_conformations: bool,\n    skip_enumerate_chiral_mol: bool,\n    skip_enumerate_double_bonds: bool,\n    skip_making_tautomers: bool,\n    skip_optimize_geometry: bool,\n    source: string,\n    thoroughness: i32,\n    use_durrant_lab_filters: bool\n}\n-&gt;\nout: @bytes\n</code></pre>\n\n<p>Generate 3D conformers from SMILES strings and other inputs.</p>\n\n<p>Inputs:\n    - An input molecule as a file: either one SMILES string per line, or an SDF\n    - The string 'smi' or 'sdf', depending on the input type\n    - A json file representing any other options to pass; see gypsum_dl docs for details</p>\n\n<p>Outputs:\n    - A sdf file containing the ligand(s)'s conformers</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t*args: [&lt;class &#x27;pathlib.Path&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;, dict[str, ~T]],</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceTarget</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ModuleInstanceTarget</span><span class=\"o\">.</span><span class=\"n\">NIX</span><span class=\"p\">:</span> <span class=\"s1\">&#39;NIX&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">input_types</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceResourcesInput</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">restore</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> [&lt;class &#x27;pathlib.Path&#x27;&gt;]:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.gnina", "modulename": "rush.doc", "qualname": "RushProvider.gnina", "kind": "function", "doc": "<p>Run docking of small molecules to proteins with gnina</p>\n\n<p>Module version: <code>gnina/2f8afc6591416c3ac986bc87ee424f9d21548590</code></p>\n\n<p>QDX Type Description:</p>\n\n<pre><code>in: @Conformer;\nin: @Conformer?;\nin: @[Conformer];\nin: {\n    autobox: f32?,\n    docking_site: {\n        center_x: f32,\n        center_y: f32,\n        center_z: f32,\n        size_x: f32,\n        size_y: f32,\n        size_z: f32\n    }?,\n    exhaustiveness: u32,\n    minimise: bool,\n    num_modes: u32\n}\n-&gt;\nout: @[[{\n    ligand: Conformer,\n    score: {affinity: f32, cnn_affinity: f32, cnn_score: f32, mode: i32}\n}]]\n</code></pre>\n\n<p>Inputs:\n    - Protein conformer\n    - Ligand conformer\n    - Either a reference ligand or binding site information.\n    Either a reference ligand could be used to demarcate the binding site or xyz coordinates of the\n    binding site and its size in the xyz direction in terms of Angstroms will be used.\n    The binding site information can be specified in the GninaOptions as well.\n    Within the GninaOptions:\n    - The exhaustiveness would determine the search extent for the docking algorithm.\n    - The num_modes would determine the number of dock poses to report.\n    - The minimise argument would determine whether to minimise the energy of the final pose.\n    - The docking_site would be for specifying where to dock the ligand to.</p>\n\n<p>Outputs:\n    - A json file containing an array of docked ligand Conformers and their scores.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t*args: [&lt;class &#x27;pathlib.Path&#x27;&gt;, typing.Optional[~T], &lt;class &#x27;pathlib.Path&#x27;&gt;, dict[str, ~T]],</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceTarget</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ModuleInstanceTarget</span><span class=\"o\">.</span><span class=\"n\">NIX_SSH</span><span class=\"p\">:</span> <span class=\"s1\">&#39;NIX_SSH&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">resources</span><span class=\"p\">:</span> <span class=\"n\">rush</span><span class=\"o\">.</span><span class=\"n\">graphql_client</span><span class=\"o\">.</span><span class=\"n\">input_types</span><span class=\"o\">.</span><span class=\"n\">ModuleInstanceResourcesInput</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">restore</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> [&lt;class &#x27;pathlib.Path&#x27;&gt;]:</span></span>", "funcdef": "async def"}, {"fullname": "rush.doc.RushProvider.config_dir", "modulename": "rush.doc", "qualname": "RushProvider.config_dir", "kind": "variable", "doc": "<p></p>\n", "default_value": "PosixPath(&#x27;/home/machineer/repos/qdx/rush-py/.rush&#x27;)"}, {"fullname": "rush.doc.RushProvider.logger", "modulename": "rush.doc", "qualname": "RushProvider.logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger rush (INFO)&gt;"}, {"fullname": "rush.doc.RushProvider.workspace", "modulename": "rush.doc", "qualname": "RushProvider.workspace", "kind": "variable", "doc": "<p></p>\n", "default_value": "PosixPath(&#x27;/home/machineer/repos/qdx/rush-py&#x27;)"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();