# Generated by ariadne-codegen
# Source: schema.graphql

from datetime import datetime
from typing import Any, List, Optional
from uuid import UUID

from pydantic import Field

from .base_model import BaseModel
from .enums import MemUnits, ModuleInstanceStatus, ModuleInstanceTarget, Order


class AccountBucketConfigInput(BaseModel):
    data_bucket: str
    log_bucket: str
    bucket_region: str


class AccountConfigInput(BaseModel):
    config_account: Optional[UUID] = None
    bucket_config: Optional["AccountBucketConfigInput"] = None


class ArgumentInput(BaseModel):
    id: Optional[UUID] = None
    name: Optional[str] = None
    tags: Optional[List[str]] = None
    value: Optional[Any] = None


class CreateProject(BaseModel):
    account_id: UUID
    name: Optional[str] = None
    description: Optional[str] = None
    tags: Optional[List[str]] = None


class CreateProtein(BaseModel):
    sequence: str
    project_id: Any
    name: Optional[str] = None
    description: Optional[str] = None
    tags: Optional[List[str]] = None


class DateTimeFilter(BaseModel):
    eq: Optional[datetime] = None
    ne: Optional[datetime] = None
    gt: Optional[datetime] = None
    ge: Optional[datetime] = None
    lt: Optional[datetime] = None
    le: Optional[datetime] = None


class Jsonfilter(BaseModel):
    eq: Optional["JsonobjectFilter"] = None
    ne: Optional["JsonobjectFilter"] = None


class JsonobjectFilter(BaseModel):
    key: str
    value: str


class MetadataSortBy(BaseModel):
    created_at: Optional[Order] = None
    updated_at: Optional[Order] = None
    deleted_at: Optional[Order] = None
    name: Optional[Order] = None
    description: Optional[Order] = None


class ModuleInput(BaseModel):
    path: str
    tags: Optional[List[str]] = None
    tests: List["TestCase"]


class ModuleInstanceInput(BaseModel):
    path: str
    args: List["ArgumentInput"]
    name: Optional[str] = None
    target: Optional[ModuleInstanceTarget] = None
    resources: Optional["ModuleInstanceResourcesInput"] = None
    tags: Optional[List[str]] = None
    out_tags: Optional[List[Optional[List[str]]]] = None
    out_names: Optional[List[Optional[str]]] = None
    end: Optional[bool] = None


class ModuleInstanceResourcesInput(BaseModel):
    gpus: Optional[int] = None
    gpu_mem: Optional[int] = None
    gpu_mem_units: Optional[MemUnits] = None
    cpus: Optional[int] = None
    nodes: Optional[int] = None
    mem: Optional[int] = None
    mem_units: Optional[MemUnits] = None
    storage: Optional[int] = None
    storage_units: Optional[MemUnits] = None
    walltime: Optional[int] = None
    storage_mounts: Optional[List[str]] = None


class ObjectDescriptorFilter(BaseModel):
    all: Optional[List["ObjectDescriptorFilter"]] = None
    any: Optional[List["ObjectDescriptorFilter"]] = None
    id: Optional["UuidFilter"] = None
    object: Optional["Jsonfilter"] = None
    base_url: Optional["StringFilter"] = None
    created_at: Optional["DateTimeFilter"] = None
    updated_at: Optional["DateTimeFilter"] = None
    deleted_at: Optional["DateTimeFilter"] = None
    name: Optional["StringFilter"] = None
    description: Optional["StringFilter"] = None


class ObjectDescriptorSortBy(BaseModel):
    id: Optional[Order] = None
    base_url: Optional[Order] = None
    account_id: Optional[Order] = None
    metadata: Optional["MetadataSortBy"] = None


class ResourceUtilizationInput(BaseModel):
    module_instance_id: UUID = Field(alias="moduleInstanceId")
    gpu: Optional[float] = None
    mem: Optional[float] = None
    storage: float
    walltime: float
    cputime: float
    inodes: float
    sus: Optional[int] = None


class StringFilter(BaseModel):
    eq: Optional[str] = None
    ne: Optional[str] = None
    gt: Optional[str] = None
    ge: Optional[str] = None
    lt: Optional[str] = None
    le: Optional[str] = None
    like: Optional[str] = None
    in_: Optional[List[str]] = Field(alias="in", default=None)
    not_in: Optional[List[str]] = None


class TestCase(BaseModel):
    args: List["ArgumentInput"]
    target: ModuleInstanceTarget
    resources: Optional["ModuleInstanceResourcesInput"] = None
    tags: Optional[List[str]] = None


class TokenFilter(BaseModel):
    all: Optional[List["TokenFilter"]] = None
    any: Optional[List["TokenFilter"]] = None
    id: Optional["UuidFilter"] = None
    created_at: Optional["DateTimeFilter"] = None
    updated_at: Optional["DateTimeFilter"] = None
    deleted_at: Optional["DateTimeFilter"] = None


class TokenSortBy(BaseModel):
    id: Optional[Order] = None
    created_at: Optional[Order] = None
    updated_at: Optional[Order] = None
    deleted_at: Optional[Order] = None
    user_id: Optional[Order] = None


class TypeQuery(BaseModel):
    path: List[str]
    query: Any


class UpdateModuleInstanceInput(BaseModel):
    id: UUID
    path: Optional[str] = None
    ins: Optional[List["ArgumentInput"]] = None
    outs: Optional[List["ArgumentInput"]] = None
    target: Optional[ModuleInstanceTarget] = None
    status: Optional[ModuleInstanceStatus] = None
    resources: Optional["ModuleInstanceResourcesInput"] = None
    tags: Optional[List[str]] = None


class UuidFilter(BaseModel):
    eq: Optional[Any] = None
    ne: Optional[Any] = None
    in_: Optional[List[Any]] = Field(alias="in", default=None)
