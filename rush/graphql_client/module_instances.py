# Generated by ariadne-codegen
# Source: combined.graphql

from datetime import datetime
from typing import Any, List, Optional
from uuid import UUID

from pydantic import Field

from .base_model import BaseModel
from .enums import ModuleInstanceStatus, ModuleInstanceTarget


class ModuleInstances(BaseModel):
    me: "ModuleInstancesMe"


class ModuleInstancesMe(BaseModel):
    account: Optional["ModuleInstancesMeAccount"]


class ModuleInstancesMeAccount(BaseModel):
    module_instances: "ModuleInstancesMeAccountModuleInstances"


class ModuleInstancesMeAccountModuleInstances(BaseModel):
    edges: List["ModuleInstancesMeAccountModuleInstancesEdges"]
    page_info: "ModuleInstancesMeAccountModuleInstancesPageInfo" = Field(alias="pageInfo")


class ModuleInstancesMeAccountModuleInstancesEdges(BaseModel):
    cursor: str
    node: "ModuleInstancesMeAccountModuleInstancesEdgesNode"


class ModuleInstancesMeAccountModuleInstancesEdgesNode(BaseModel):
    id: UUID
    account_id: UUID
    created_at: datetime
    deleted_at: Optional[datetime]
    queued_at: Optional[datetime]
    admitted_at: Optional[datetime]
    dispatched_at: Optional[datetime]
    completed_at: Optional[datetime]
    path: str
    status: ModuleInstanceStatus
    target: ModuleInstanceTarget
    tags: Optional[List[str]]
    ins: List["ModuleInstancesMeAccountModuleInstancesEdgesNodeIns"]
    outs: List["ModuleInstancesMeAccountModuleInstancesEdgesNodeOuts"]
    resources: Optional["ModuleInstancesMeAccountModuleInstancesEdgesNodeResources"]
    progress: Optional["ModuleInstancesMeAccountModuleInstancesEdgesNodeProgress"]


class ModuleInstancesMeAccountModuleInstancesEdgesNodeIns(BaseModel):
    id: UUID
    created_at: datetime
    deleted_at: Optional[datetime]
    rejected_at: Optional[datetime]
    account_id: UUID
    typeinfo: Any
    value: Optional[Any]
    tags: Optional[List[str]]


class ModuleInstancesMeAccountModuleInstancesEdgesNodeOuts(BaseModel):
    id: UUID
    created_at: datetime
    deleted_at: Optional[datetime]
    rejected_at: Optional[datetime]
    account_id: UUID
    typeinfo: Any
    value: Optional[Any]
    tags: Optional[List[str]]


class ModuleInstancesMeAccountModuleInstancesEdgesNodeResources(BaseModel):
    gpus: Optional[int]
    nodes: Optional[int]
    mem: Optional[int]
    storage: Optional[int]
    walltime: Optional[int]


class ModuleInstancesMeAccountModuleInstancesEdgesNodeProgress(BaseModel):
    n: int
    n_expected: int
    n_max: int
    done: bool


class ModuleInstancesMeAccountModuleInstancesPageInfo(BaseModel):
    has_previous_page: bool = Field(alias="hasPreviousPage")
    has_next_page: bool = Field(alias="hasNextPage")
    start_cursor: Optional[str] = Field(alias="startCursor")
    end_cursor: Optional[str] = Field(alias="endCursor")


ModuleInstances.model_rebuild()
ModuleInstancesMe.model_rebuild()
ModuleInstancesMeAccount.model_rebuild()
ModuleInstancesMeAccountModuleInstances.model_rebuild()
ModuleInstancesMeAccountModuleInstancesEdges.model_rebuild()
ModuleInstancesMeAccountModuleInstancesEdgesNode.model_rebuild()
